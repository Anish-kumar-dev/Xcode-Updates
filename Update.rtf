{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Light;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 TrebuchetMS;
\f3\fnil\fcharset0 LucidaGrande;\f4\fnil\fcharset0 Monaco;\f5\fmodern\fcharset0 Courier;
\f6\froman\fcharset0 Times-Roman;\f7\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red13\green41\blue137;
\red61\green61\blue61;\red55\green55\blue55;\red83\green83\blue83;\red11\green91\blue173;\red234\green234\blue234;
\red0\green0\blue0;\red52\green52\blue52;\red248\green60\blue25;\red109\green2\blue2;\red193\green193\blue193;
\red178\green145\blue67;\red38\green38\blue38;\red117\green117\blue117;\red12\green96\blue192;\red38\green38\blue38;
\red133\green35\blue26;\red2\green28\blue65;\red69\green69\blue69;\red37\green127\blue159;\red106\green0\blue1;
\red133\green0\blue2;\red14\green14\blue14;\red133\green0\blue2;\red118\green117\blue66;\red65\green65\blue65;
\red251\green0\blue31;\red39\green78\blue192;\red135\green137\blue83;\red251\green0\blue7;\red251\green0\blue7;
\red74\green74\blue74;\red29\green29\blue29;\red190\green0\blue4;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid2001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid21}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}}
\paperw11900\paperh16840\margl1440\margr1440\vieww14680\viewh10520\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520
\ls1\ilvl0
\f0\fs32 \cf2 \cb3 {\listtext	1.	}How much experience / how long have you worked with Objective-C / Cocoa / iOS ?\
{\listtext	2.	}What was the first version of iOS you worked with?\
{\listtext	3.	}How are your memory management skills? \'a0(I only know ARC, I know about release/retain, I know about how to make both types work together)\
{\listtext	4.	}Do you have experience with\'85\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl520
\ls1\ilvl1\cf2 {\listtext	\'95	}Customizing UIViews with drawRect: \'a0(i.e. CoreGraphics / QuartzCore )\
{\listtext	\'95	}CoreAnimation / CALayer manipulation\
{\listtext	\'95	}Container View Controllers ? \'a0(i.e. childViewControllers on iOS 5+)\
{\listtext	\'95	}Customizing standard UI Components (UINavigationBar, UITabBar, etc.)\
{\listtext	\'95	}Custom UITableViews, UITableViewCells\
{\listtext	\'95	}Laying out Views (i.e. all layout code, setting frames, belongs in layoutSubviews)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl520
\ls1\ilvl0\cf2 {\listtext	5.	}What Networking Frameworks are you familiar with / prefer? \'a0e.g. ASIHTTPRequest, AFNetworking, RESTKit, MKNetworkKit, etc.\
{\listtext	6.	}Have you ever worked with blocks / written Block-based API\'92s ?\
{\listtext	7.	}What about categories? \'a0Why would you typically write categories? \'a0And with code you have source for?\
{\listtext	8.	}How do you tend to handle persistence on the device? \'a0(e.g. NSCoding, CoreData, NSData with filepaths)\
{\listtext	9.	}Do you have experience with Asynchronous Image Loading? \'a0i.e. subclass/category on UIImageView\
{\listtext	10.	}What do you have to be careful of? \'a0(e.g. cancel image loading request when view disappears / is to be reused in tableView, don\'92t block UI on main thread, instead do image operations on a background thread)\
{\listtext	11.	}Do you have any favourite open source libraries for this, or do you create your own?\
{\listtext	12.	}In addition, what are your favourite Open Source Libraries / Use most often? \'a0Why?\
{\listtext	13.	}Back to asynchronous communication. \'a0How do you approach this in general? \'a0(e.g. you update one data object from the server on which other objects in your App need to know about) \'a0KVO? \'a0NSNotificationCenter? \'a0etc\
{\listtext	14.	}Have you discovered the greatness of NSOperation technology and are you competent with concurrency? \'a0How might you create a block-based API that does work on a background thread and returns its result to the main thread?\
{\listtext	15.	}Do you have a public repository or a .zip file you could provide so we might look at your code examples?\
{\listtext	16.	}If you have a problem you need to solve and aren\'92t sure at the beginning how, what are your typical strategies to solving such problems? \'a0(A vague question)\
{\listtext	17.	}How good are you at debugging? \'a0i.e. NSLog tracing, breakpoints, Instruments, or what?\
{\listtext	18.	}(There is no correct answer, only to get a sense of the candidate\'92s style)\'a0 Are you formal in your design approaches (e.g. UML Diagrams), or are you more of a cowboy? \'a0(Code first, design later). \'a0How do you approach writing your classes? \'a0(i.e. write headers first, comment what they are supposed to do, then implement later. \'a0Pen and paper first, then coding. \'a0Etc etc)\
{\listtext	19.	}What is your opinion / commentary on the topic of encapsulation?\
{\listtext	20.	}How many Apps have you worked on that have been published to the AppStore?\
{\listtext	21.	}Any you are particularly proud of, and why? \'a0 What was your role on them?\
{\listtext	22.	}Do you have experience dealing with Provisioning Profile management?\
{\listtext	23.	}What part of iOS Development do you like most? \'a0e.g. writing custom components, designing the App\'92s architecture, integrating foreign services (like other webservices), etc.\uc0\u8232 or, If someone asked you what area of the app you would like to primarily develop, what would you pick and why? \'a0(basically to determine what *kind* of programming he\'92s into)\
{\listtext	24.	}Experience with working with Maps \'a0(MapKit framework?)\
{\listtext	25.	}(on formality) \'a0To what extent do you document your code? \'a0e.g. Zero, Commented Headers, Official doxygen/appledoc style headers.\
{\listtext	26.	}To what extent do you use Instruments for debugging?\
\pard\pardeftab720\sl520\sa520
\cf2 (UPDATE: As a companion to this post, please also see{\field{\*\fldinst{HYPERLINK "http://horseshoe7.wordpress.com/2013/05/10/practical-considerations-of-the-technical-interview/"}}{\fldrslt \cf4  my thoughts on technical interviews}})\
\pard\pardeftab720\sl520\sa520

\f1\b \cf2 SECOND UPDATE
\f0\b0 : \'a0I also have the ultimate iOS Developer technical test you can assign a potential hire. \'a0It should take 1-3 hours. \'a0It is easy to communicate, allows a lot of freedom of implementation so you can really get a better picture into how a developer thinks, and will make sure this developer knows the absolute fundamentals. \'a0Ready for it?\

\f1\b Calculate the and display each Fibonacci number from 1 -> max N possible on an iPhone with unsigned integers, and display each F(n) in a table view. \'a0The UITableView scrolling MUST remain smooth.
\f0\b0 \
That\'92s it. \'a0You\'92ll be amazed at how profoundly simple this task sounds and yet how much iOS knowledge can be demonstrated. \'a0Not just what they know, but how they structure their work. \'a0You can assess their APIs, their separation of concerns when designing classes, the considerations they\'92ve made for performance, and their knowledge of concurrency. \'a0(Not to mention their knowledge of recursive functions.) \'a0It is ok to give them the formula, and allow them to use Google. \'a0F(n) = F(n-1) + F(n-2).\
\
\
\pard\pardeftab720\sl420

\f2\b\fs28 \cf5 1-How would you create your own custom view?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 By Subclassing the UIView class.\
\pard\pardeftab720\sl420

\i0\b \cf5 2-Whats fast enumeration
\b0 ?\
\pard\pardeftab720\sl420

\i \cf6 Fast enumeration is a language feature that allows you to enumerate over the contents of a collection. (Your code will also run faster because the internal implementation reduces\
message send overhead and increases pipelining potential.)\
\pard\pardeftab720\sl420

\i0\b \cf5 3-Whats a struct?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 A struct is a special C data type that encapsulates other pieces of data into a single cohesive unit. Like an object, but built into C.\
\pard\pardeftab720\sl420

\i0\b \cf5 4-What are mutable and immutable types in Objective C?\uc0\u8232 
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Mutable means you can change its contents later but when you mark any object immutable, it means once they are initialized, their values cannot be changed. For example, NSArray, NSString values cannot be changed after initialized.\
\pard\pardeftab720\sl420

\i0\b \cf5 5-Explain retain counts
\b0 .\
\pard\pardeftab720\sl420

\i \cf6 Retain counts are the way in which memory is managed in Objective-C. When you create an object, it has a retain count of 1. When you send an object a retain message, its retain count is incremented by 1. When you send an object a release message, its retain count is decremented by 1. When you send an object a autorelease message, its retain count is decremented by 1 at some stage in the future. If an object
\f3\i0 \uc0\u700 
\f2\i s retain count is reduced to 0, it is deallocated.\
\pard\pardeftab720\sl420

\i0\b \cf5 6-Whats the difference between frame and bounds
\b0 ?\
\pard\pardeftab720\sl420

\i \cf6 The frame of a view is the rectangle, expressed as a location (x,y) and size (width,height) relative to the superview it is contained within. The bounds of a view is the rectangle, expressed as a location (x,y) and size (width,height) relative to its own coordinate system (0,0).\
\pard\pardeftab720\sl420

\i0\b \cf5 7-Is a delegate retained
\b0 ?\
\pard\pardeftab720\sl420

\i \cf6 No, the delegate is never retained! Ever!\
\pard\pardeftab720\sl420

\i0\b \cf5 8-Outline the class hierarchy for a UIButton until NSObject.
\b0 \
\pard\pardeftab720\sl420

\i \cf6 UIButton inherits from UIControl, UIControl inherits from UIView, UIView inherits from UIResponder, UIResponder inherits from the root class NSObject\
\pard\pardeftab720\sa170

\i0\b\fs40 \cf5 9- What is\'a0
\f4\b0\fs24 dynamic
\f2\b\fs40 ?
\b0 \
\pard\pardeftab720\sl420

\i\fs28 \cf6 You use the\'a0
\f4\i0\fs24 @dynamic
\f2\i\fs28 \'a0keyword to tell the compiler that you will fulfill the API contract implied by a property either by providing method implementations directly or at runtime using other mechanisms such as dynamic loading of code or dynamic method resolution. It suppresses the warnings that the compiler would otherwise generate if it can\'92t find suitable implementations. You should use it only if you know that the methods will be available at runtime\
\pard\pardeftab720\sl420

\i0\b \cf5 10-If I call performSelector:withObject:afterDelay: \'96 is the object retained?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Yes, the object is retained. It creates a timer that calls a selector on the current threads run loop. It may not be 100% precise time-wise as it attempts to dequeue the message from\
the run loop and perform the selector.\
\pard\pardeftab720\sl420

\i0\b \cf5 11-Can you explain what happens when you call autorelease on an object?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 When you send an object a autorelease message, its retain count is decremented by 1 at some stage in the future. The object is added to an autorelease pool on the current thread. The main thread loop creates an autorelease pool at the beginning of the function, and release it at the end. This establishes a pool for the lifetime of the task. However, this also means that any autoreleased objects created during the lifetime of the task are not disposed of until the task completes. This may lead to the task
\f3\i0 \uc0\u700 
\f2\i s memory footprint increasing unnecessarily. You can also consider creating pools with a narrower scope or use NSOperationQueue with it
\f3\i0 \uc0\u700 
\f2\i s own autorelease pool. (Also important \'96 You only release or autorelease objects you own.)\
\pard\pardeftab720\sl420

\i0\b \cf5 12-Whats the NSCoder class used for?
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 NSCoder is an abstractClass which represents a stream of data. They are used in Archiving and Unarchiving objects. NSCoder objects are usually used in a method that is being implemented so that the class conforms to the protocol. (which has something like encodeObject and decodeObject methods in them).\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 13-Whats an NSOperationQueue and how/would you use it?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 The NSOperationQueue class regulates the execution of a set of NSOperation objects. An operation queue is generally used to perform some asynchronous operations on a background thread so as not to block the main thread.\
\pard\pardeftab720\sl420

\i0\b \cf5 14-Explain the correct way to manage Outlets memory
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Create them as properties in the header that are retained. In the viewDidUnload set the outlets to nil(i.e self.outlet = nil). Finally in dealloc make sure to release the outlet.\
\pard\pardeftab720\sl420

\i0\b \cf5 15-Is the delegate for a CAAnimation retained?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Yes it is!! This is one of the rare exceptions to memory management rules.\
\pard\pardeftab720\sl420

\i0\b \cf5 16-What happens when the following code executes?
\b0 \

\b Ball *ball = [[[[Ball alloc] init] autorelease] autorelease];
\b0 \
\pard\pardeftab720\sl420

\i \cf6 It will crash because it
\f3\i0 \uc0\u700 
\f2\i s added twice to the autorelease pool and when it it dequeued the autorelease pool calls release more than once.\
\pard\pardeftab720\sl420

\i0\b \cf5 17-Explain the difference between NSOperationQueue concurrent and non-concurrent.
\b0 \
\pard\pardeftab720\sl420

\i \cf6 In the context of an NSOperation object, which runs in an NSOperationQueue, the terms concurrent and non-concurrent do not necessarily refer to the side-by-side execution of threads. Instead, a non-concurrent operation is one that executes using the environment that is provided for it while a concurrent operation is responsible for setting up its own execution environment.\
\pard\pardeftab720\sl420

\i0\b \cf5 18-Implement your own synthesized methods for the property NSString *title.
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 Well you would want to implement the getter and setter for the title object. Something like this: view source print?\
- (NSString*) title // Getter method\
\{\
return title;\
\}\
- (void) setTitle: (NSString*) newTitle //Setter method\
\{\
if (newTitle != title)\
\{\
[title release];\
title = [newTitle retain]; // Or copy, depending on your needs.\
\}\
\}\
\
\pard\pardeftab720\sl360

\i0\b \cf5 19-Implement the following methods: retain, release, autorelease.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 -(id)retain\
\{\
NSIncrementExtraRefCount(self);\
return self;\
\}\
-(void)release\
\{\
if(NSDecrementExtraRefCountWasZero(self))\
\{\
NSDeallocateObject(self);\
\}\
\}\
-(id)autorelease\
\{ // Add the object to the autorelease pool\
[NSAutoreleasePool addObject:self];\
return self
\b 20-What are the App states. Explain them?
\b0 \
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls2\ilvl0
\i\b \cf7 {\listtext	\'95	}Not running State
\b0 : The app has not been launched or was running but was terminated by the system.\
\ls2\ilvl0
\b {\listtext	\'95	}Inactive state:
\b0 \'a0The app is running in the foreground but is currently not receiving events. (It may be executing other code though.) An app usually stays in this state only briefly as it transitions to a different state. The only time it stays inactive for any period of time is when the user locks the screen or the system prompts the user to respond to some event, such as an incoming phone call or SMS message.\
\ls2\ilvl0
\b {\listtext	\'95	}Active state
\b0 : The app is running in the foreground and is receiving events. This is the normal mode for foreground apps.\
\ls2\ilvl0
\b {\listtext	\'95	}Background state
\b0 : The app is in the background and executing code. Most apps enter this state briefly on their way to being suspended. However, an app that requests extra execution time may remain in this state for a period of time. In addition, an app being launched directly into the background enters this state instead of the inactive state. For information about how to execute code while in the background, see \'93Background Execution and Multitasking.\'94\
\ls2\ilvl0
\b {\listtext	\'95	}Suspended state:
\b0 The app is in the background but is not executing code. The system moves apps to this state automatically and does not notify them before doing so. While suspended, an app remains in memory but does not execute any code. When a low-memory condition occurs, the system may purge suspended apps without notice to make more space for the foreground app.\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 21-What is Automatic Reference Counting (ARC) ?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 ARC is a compiler-level feature that simplifies the process of managing the lifetimes of Objective-C objects. Instead of you having to remember when to retain or release an object, ARC evaluates the lifetime requirements of your objects and automatically inserts the appropriate method calls at compile time.\
\pard\pardeftab720\sl420

\i0\b \cf5 22-Multitasking support is available from which version?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 iOS 4 and above supports multi-tasking and allows apps to remain in the background until they are launched again or until they are terminated.\
\pard\pardeftab720\sl420

\i0\b \cf5 23-How many bytes we can send to apple push notification server.
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 256bytes.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 24-What is the difference between retain & assign?
\b0 \
\pard\pardeftab720\sl360

\i\b \cf6 Assign
\b0 \'a0creates a reference from one object to another without increasing the source\'92s retain count.\
\pard\pardeftab720\sl360

\f4\i0\fs24 \cf6 if (_variable != object)
\f2\i\fs26 \

\f4\i0\fs24 \{
\f2\i\fs26 \

\f4\i0\fs24 [_variable release];
\f2\i\fs26 \

\f4\i0\fs24 _variable = nil;
\f2\i\fs26 \

\f4\i0\fs24 _variable = object;
\f2\i\fs26 \

\f4\i0\fs24 \}
\f2\i\fs26 \
\pard\pardeftab720\sl360

\b \cf6 Retain
\b0 \'a0creates a reference from one object to another and increases the retain count of the source object.\
\pard\pardeftab720\sl360

\f4\i0\fs24 \cf6 if (_variable != object)
\f2\i\fs26 \

\f4\i0\fs24 \{ [_variable release];
\f2\i\fs26 \

\f4\i0\fs24 _variable = nil;
\f2\i\fs26 \

\f4\i0\fs24 _variable = [object retain];
\f2\i\fs26 \

\f4\i0\fs24 \}
\f2\i\fs26 \
\
\pard\pardeftab720\sl360

\i0\b \cf5 25-Why do we need to use @Synthesize?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 We can use generated code like nonatomic, atmoic, retain without writing any lines of code. We also have getter and setter methods. To use this, you have 2 other ways: @synthesize or @dynamic: @synthesize, compiler will generate the getter and setter automatically for you, @dynamic: you have to write them yourself.@property is really good for memory management, for example: retain.How can you do retain without @property?\
\pard\pardeftab720\sl360

\f4\i0\fs24 \cf6 if (_variable != object)
\f2\i\fs26 \

\f4\i0\fs24 \{
\f2\i\fs26 \

\f4\i0\fs24 [_variable release];
\f2\i\fs26 \

\f4\i0\fs24 _variable = nil;
\f2\i\fs26 \

\f4\i0\fs24 _variable = [object retain];
\f2\i\fs26 \

\f4\i0\fs24 \}
\f2\i\fs26 \
How can you use it with @property?
\f4\i0\fs24 self.variable = object;
\f2\i\fs26 When we are calling the above line, we actually call the setter like [self setVariable:object] and then the generated setter will do its job\
\
\pard\pardeftab720\sl360

\i0\b \cf5 26-What is categories in iOS?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 A Category is a feature of the Objective-C language that enables you to add methods (interface and implementation) to a class without having to make a subclass. There is no runtime difference\'97within the scope of your program\'97between the original methods of the class and the methods added by the category. The methods in the category become part of the class type and are inherited by all the class\'92s subclasses.As with delegation, categories are not a strict adaptation of the Decorator pattern, fulfilling the intent but taking a different path to implementing that intent. The behavior added by categories is a compile-time artifact, and is not something dynamically acquired. Moreover, categories do not encapsulate an instance of the class being extended.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 27-What is Delegation in iOS?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Delegation is a design pattern in which one object sends messages to another object\'97specified as its delegate\'97to ask for input or to notify it that an event is occurring. Delegation is often used as an alternative to class inheritance to extend the functionality of reusable objects. For example, before a window changes size, it asks its delegate whether the new size is ok. The delegate replies to the window, telling it that the suggested size is acceptable or suggesting a better size. (For more details on window resizing, see the{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSWindowDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSWindowDelegate/windowWillResize:toSize:"}}{\fldrslt 
\f4\i0\fs24 \cf8 windowWillResize:toSize:}}\'a0message.)Delegate methods are typically grouped into a protocol. A protocol is basically just a list of methods. The delegate protocol specifies all the messages an object might send to its delegate. If a class conforms to (or\'a0adopts) a protocol, it guarantees that it implements the required methods of a protocol. (Protocols may also include optional methods).In this application, the application object tells its delegate that the main startup routines have finished by sending it the{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSApplicationDelegate/applicationDidFinishLaunching:"}}{\fldrslt 
\f4\i0\fs24 \cf8 applicationDidFinishLaunching:}}\'a0message. The delegate is then able to perform additional tasks if it wants.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 28-How can we achieve singleton pattern in iOS?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 The Singleton design pattern ensures a class only has one instance, and provides a global point of access to it. The class keeps track of its sole instance and ensures that no other instance can be created. Singleton classes are appropriate for situations where it makes sense for a single object to provide access to a global resource.Several Cocoa framework classes are singletons. They include{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/Reference/Reference.html#//apple_ref/occ/cl/NSFileManager"}}{\fldrslt 
\f4\i0\fs24 \cf8 NSFileManager}},\'a0
\f4\i0\fs24 NSWorkspace
\f2\i\fs26 ,\'a0
\f4\i0\fs24 NSApplication
\f2\i\fs26 , and, in UIKit,{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/Reference/Reference.html#//apple_ref/occ/cl/UIApplication"}}{\fldrslt 
\f4\i0\fs24 \cf8 UIApplication}}. A process is limited to one instance of these classes. When a client asks the class for an instance, it gets a shared instance, which is lazily created upon the first request.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 29-What is delegate pattern in iOS?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Delegation is a mechanism by which a host object embeds a weak reference (weak in the sense that it\'92s a simple pointer reference, unretained) to another object\'97its delegate\'97and periodically sends messages to the delegate when it requires its input for a task. The host object is generally an \'93off-the-shelf\'94 framework object (such as an\'a0
\f4\i0\fs24 NSWindow
\f2\i\fs26 \'a0or\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSXMLParser_Class/Reference/Reference.html#//apple_ref/occ/cl/NSXMLParser"}}{\fldrslt 
\f4\i0\fs24 \cf8 NSXMLParser}}object) that is seeking to accomplish something, but can only do so in a generic fashion. The delegate, which is almost always an instance of a custom class, acts in coordination with the host object, supplying program-specific behavior at certain points in the task (see Figure 4-3). Thus delegation makes it possible to modify or extend the behavior of another object without the need for subclassing.Refer: delegate pattern\
\
\pard\pardeftab720\sl360

\i0\b \cf5 30-What are all the difference between categories and subclasses?Why should we go to subclasses?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Category is a feature of the Objective-C language that enables you to add methods (interface and implementation) to a class without having to make a subclass. There is no runtime difference\'97within the scope of your program\'97between the original methods of the class and the methods added by the category. The methods in the category become part of the class type and are inherited by all the class\'92s subclasses.As with delegation, categories are not a strict adaptation of the Decorator pattern, fulfilling the intent but taking a different path to implementing that intent. The behavior added by categories is a compile-time artifact, and is not something dynamically acquired. Moreover, categories do not encapsulate an instance of the class being extended.The Cocoa frameworks define numerous categories, most of them informal protocols . Often they use categories to group related methods. You may implement categories in your code to extend classes without subclassing or to group related methods. However, you should be aware of these caveats:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls3\ilvl0\cf7 {\listtext	\'95	}You cannot add instance variables to the class.\
{\listtext	\'95	}If you override existing methods of the class, your application may behave unpredictably.\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 31-What is notification in iOS?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 The notification mechanism of Cocoa implements one-to-many broadcast of messages based on the Observer pattern. Objects in a program add themselves or other objects to a list of observers of one or more notifications, each of which is identified by a global string (the notification name). The object that wants to notify other objects\'97the observed object\'97creates a notification object and posts it to a notification center. The notification center determines the observers of a particular notification and sends the notification to them via a message. The methods invoked by the notification message must conform to a certain single-parameter signature. The parameter of the method is the notification object, which contains the notification name, the observed object, and a dictionary containing any supplemental information.Posting a notification is a synchronous procedure. The posting object doesn\'92t regain control until the notification center has broadcast the notification to all observers. For asynchronous behavior, you can put the notification in a notification queue; control returns immediately to the posting object and the notification center broadcasts the notification when it reaches the top of the queue.Regular notifications\'97that is, those broadcast by the notification center\'97are intraprocess only. If you want to broadcast notifications to other processes, you can use the istributed notification center and its related API.\
\pard\pardeftab720\sl420

\i0\b \cf5 32-What is the difference between delegates and notifications?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 We can use notifications for a variety of reasons. For example, you could broadcast a notification to change how user-interface elements display information based on a certain event elsewhere in the program. Or you could use notifications as a way to ensure that objects in a document save their state before the document window is closed. The general purpose of notifications is to inform other objects of program events so they can respond appropriately.But objects receiving notifications can react only after the event has occurred. This is a significant difference from delegation. The delegate is given a chance to reject or modify the operation proposed by the delegating object. Observing objects, on the other hand, cannot directly affect an impending operation.\
\pard\pardeftab720\sl420

\i0\b \cf5 33-What is posing in iOS?
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 Objective-C permits a class to\'a0
\b entirely replace another class
\b0 \'a0within an application. The replacing class is said to \'93pose as\'94 the target class. All messages sent to the target class are then instead received by the posing class. There are some restrictions on which classes can pose:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls4\ilvl0\cf7 {\listtext	\'95	}A class may only pose as one of its direct or indirect superclasses\
{\listtext	\'95	}The posing class must not define any new instance variables which are absent from the target class (though it may define or override methods).\
{\listtext	\'95	}No messages must have been sent to the target class prior to the posing.\
\pard\pardeftab720\sl360
\cf6 Posing, similarly to categories, allows\'a0
\b globally augmenting existing classes
\b0 . Posing permits two features absent from categories:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls5\ilvl0\cf7 {\listtext	\'95	}A posing class can call overridden methods through super, thus incorporating the implementation of the target class.\
{\listtext	\'95	}A posing class can override methods defined in categories.\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 34-What is atomic and nonatomic? Which one is safer? Which one is default?
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 You can use this attribute to specify that accessor methods are not atomic. (There is no keyword to denote atomic.)\
\pard\pardeftab720\sl360

\f4\i0\fs24 \cf6 nonatomic
\f2\i\b\fs26 \ul \
\pard\pardeftab720\sl360

\b0 \cf6 \ulnone Specifies that accessors are nonatomic.\'a0By default, accessors are atomic.\
Properties are atomic by default so that synthesized accessors provide robust access to properties in a multithreaded environment\'97that is, the value returned from the getter or set via the setter is always fully retrieved or set regardless of what other threads are executing concurrently.\
If you specify\'a0
\f4\i0\fs24 strong
\f2\i\fs26 ,\'a0
\f4\i0\fs24 copy
\f2\i\fs26 , or\'a0
\f4\i0\fs24 retain
\f2\i\fs26 \'a0and do not specify
\f4\i0\fs24 nonatomic
\f2\i\fs26 , then in a reference-counted environment, a synthesized get accessor for an object property uses a lock and retains and autoreleases the returned value\'97the implementation will be similar to the following:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth8340\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400

\f5\i0\fs24 \cf0 \cb1 [_internal lock]; // lock using an object-level lock\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth8340\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400
\cf0 id result = [[value retain] autorelease];\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth8340\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400
\cf0 [_internal unlock];\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth8340\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400
\cf0 return result;\cell \lastrow\row
\pard\pardeftab720\sl360

\f2\i\fs26 \cf6 \cb3 If you specify\'a0
\f4\i0\fs24 nonatomic
\f2\i\fs26 , a synthesized accessor for an object property simply returns the value directly.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 35-Where can you test Apple iPhone apps if you don\'92t have the device?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 iOS Simulator can be used to test mobile applications. Xcode tool that comes along with iOS SDK includes Xcode IDE as well as the iOS Simulator. Xcode also includes all required tools and frameworks for building iOS apps. However, it is strongly recommended to test the app on the real device before publishing it.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 36-Which JSON framework is supported by iOS?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 SBJson framework is supported by iOS. It is a JSON parser and generator for Objective-C. SBJson provides flexible APIs and additional control that makes JSON handling easier.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 37-What are the tools required to develop iOS applications?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 iOS development requires Intel-based Macintosh computer and iOS SDK.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 38- Name the framework that is used to construct application\'92s user interface for iOS.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 A. The UIKit framework is used to develop application\'92s user interface for iOS. UIKit framework provides event handling, drawing model, windows, views, and controls specifically designed for a touch screen interface.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 39-Name the application thread from where UIKit classes should be used?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 UIKit classes should be used only from an application\'92s main thread. Note: The derived classes of UIResponder and the classes which manipulate application\'92s user interface should be used from application\'92s main thread.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 40- Which API is used to write test scripts that help in exercising the application\'92s user interface elements?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 UI Automation API is used to automate test procedures. Tests scripts are written in JavaScript to the UI Automation API. This in turn simulates user interaction with the application and returns log information to the host computer.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 41-Why an app on iOS device behaves differently when running in foreground than in background?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An application behaves differently when running in foreground than in background because of the limitation of resources on iOS devices.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 42- How can an operating system improve battery life while running an app?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app is notified whenever the operating system moves the apps between foreground and background. The operating system improves battery life while it bounds what your app can do in the background. This also improves the user experience with foreground app.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 43-Which framework delivers event to custom object when app is in foreground?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 The UIKit infrastructure takes care of delivering events to custom objects. As an app developer, you have to override methods in the appropriate objects to process those events.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 44-When an app is said to be in not running state?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app is said to be in \'91not running\'92 state when:\
- it is not launched.\
- it gets terminated by the system during running.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 45-Assume that your app is running in the foreground but is currently not receiving events. In which sate it would be in?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app will be in InActive state if it is running in the foreground but is currently not receiving events. An app stays in InActive state only briefly as it transitions to a different state.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 46- Give example scenarios when an application goes into InActive state?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app can get into InActive state when the user locks the screen or the system prompts the user to respond to some event e.g. SMS message, incoming call etc.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 47-When an app is said to be in active state?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app is said to be in active state when it is running in foreground and is receiving events.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 48-Name the app sate which it reaches briefly on its way to being suspended
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app enters background state briefly on its way to being suspended.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 49- Assume that an app is not in foreground but is still executing code. In which state will it be in?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Background state.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 50-An app is loaded into memory but is not executing any code. In which state will it be in?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 An app is said to be in suspended state when it is still in memory but is not executing any code.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 51-Assume that system is running low on memory. What can system do for suspended apps?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 In case system is running low on memory, the system may purge suspended apps without notice.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 52- How can you respond to state transitions on your app?
\b0 \
\pard\pardeftab720\sl420

\i\fs28 \cf6 On state transitions can be responded to state changes in an appropriate way by calling corresponding methods on app\'92s delegate object.\
\pard\pardeftab720\sl420
\cf6 \ul \ulc6 For example:\'a0\ulnone applicationDidBecomeActive method can be used to prepare to run as the foreground app.\
applicationDidEnterBackground method can be used to execute some code when app is running in the background and may be suspended at any time.\
applicationWillEnterForeground method can be used to execute some code when your app is moving out of the background\
applicationWillTerminate method is called when your app is being terminated.\
\pard\pardeftab720\sl420

\i0\b \cf5 53-List down app\'92s state transitions when it gets launched.
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Before the launch of an app, it is said to be in not running state.\
When an app is launched, it moves to the active or background state, after transitioning briefly through the inactive state.\
\pard\pardeftab720\sl420

\i0\b \cf5 54-Who calls the main function of you app during the app launch cycle?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 During app launching, the system creates a main thread for the app and calls the app\'92s main function on that main thread. The Xcode project\'92s default main function hands over control to the UIKit framework, which takes care of initializing the app before it is run.\
\pard\pardeftab720\sl420

\i0\b \cf5 55-What is the use of controller object UIApplication?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Controller object UIApplication is used without subclassing to manage the application event loop.\
It coordinates other high-level app behaviors.\
It works along with the app delegate object which contains app-level logic.\
\pard\pardeftab720\sl420

\i0\b \cf5 56-Which object is create by UIApplicationMain function at app launch time?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 The app delegate object is created by UIApplicationMain function at app launch time. The app delegate object\'92s main job is to handle state transitions within the app.\
\pard\pardeftab720\sl420

\i0\b \cf5 57- How is the app delegate is declared by Xcode project templates?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 App delegate is declared as a subclass of UIResponder by Xcode project templates.\
\pard\pardeftab720\sl420

\i0\b \cf5 58-What happens if IApplication object does not handle an event?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 In such case the event will be dispatched to your app delegate for processing.\
\pard\pardeftab720\sl420

\i0\b \cf5 59- Which app specific objects store the app\'92s content?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Data model objects are app specific objects and store app\'92s content. Apps can also use document objects to manage some or all of their data model objects.\
\pard\pardeftab720\sl420

\i0\b \cf5 60-Are document objects required for an application? What does they offer?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Document objects are not required but are very useful in grouping data that belongs in a single file or file package.\
\pard\pardeftab720\sl420

\i0\b \cf5 61- Which object manage the presentation of app\'92s content on the screen?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 View controller objects takes care of the presentation of app\'92s content on the screen. A view controller is used to manage a single view along with the collection of subviews. It makes its views visible by installing them in the app\'92s window.\
\pard\pardeftab720\sl420

\i0\b \cf5 62- Which is the super class of all view controller objects?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 UIViewController class. The functionality for loading views, presenting them, rotating them in response to device rotations, and several other standard system behaviors are provided by UIViewController class.\
\pard\pardeftab720\sl420

\i0\b \cf5 63-What is the purpose of UIWindow object?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 The presentation of one or more views on a screen is coordinated by UIWindow object.\
\pard\pardeftab720\sl420

\i0\b \cf5 64-How do you change the content of your app in order to change the views displayed in the corresponding window?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 To change the content of your app, you use a view controller to change the views displayed in the corresponding window. Remember, window itself is never replaced.\
\pard\pardeftab720\sl420

\i0\b \cf5 65-Define view object.
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Views along with controls are used to provide visual representation of the app content. View is an object that draws content in a designated rectangular area and it responds to events within that area.\
\pard\pardeftab720\sl420

\i0\b \cf5 66-Apart from incorporating views and controls, what else an app can incorporate?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Apart from incorporating views and controls, an app can also incorporate Core Animation layers into its view and control hierarchies.\
\pard\pardeftab720\sl420

\i0\b \cf5 67- What are layer objects and what do they represent?
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 Layer objects are data objects which represent visual content. Layer objects are used by views to render their content. Custom layer objects can also be added to the interface to implement complex animations and other types of sophisticated visual effects.\
\
\pard\pardeftab720\sl360\sa170

\i0\b\fs40 \cf5 68-What is App Bundle?
\b0 \
\pard\pardeftab720\sl420

\i\fs28 \cf6 When you build your iOS app, Xcode packages it as a bundle. A
\b bundle
\b0 \'a0is a directory in the file system that groups related resources together in one place. An iOS app bundle contains the app executable file and supporting resource files such as app icons, image files, and localized content.\
\pard\pardeftab720\sl420

\i0\b \cf5 69-Define property?
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 It is used to access instance variables outside of class.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 70-Why synthesized is used?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 After declaring property we will have to tell compiler instantly by using synthesize directive. This tells the compiler to generate setter and getter methods.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 71-What is retaining?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 It is reference count for an object.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 72- What is webservice?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 To get data in form of xml ,by using this we can get data from a server.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 73-What is parsing?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 To get data from web service we use parsing.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 74-which xml parser we use on iphone?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'93NSXML\'94 Parser.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 75-Which type of parse does iphone support?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'93SAX\'94 parser.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 76-.Name those classes used to establish connection b/w application to webserver?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (a)NSURL (b)NSURL REQUEST (c)NSURL CONNECTION.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 77-Tell the difference between DOM and SAX Parser?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (a)Dom is \'93documents based parser\'94.\
b)SAX is a event driven parser\
\
\pard\pardeftab720\sl360

\i0\b \cf5 78-Name three method of NSXML parser.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (1)did start element (2)did end element (3)found character.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 79-Tell methods used in NSURLConnection
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (1)Connection did receive Response\
(2)Connection did recevice Datat\
(3)Connection fail with error\
(4)Connection did finish loading.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 80-.What is json-parser?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 JSON(Java script object notation)is a parser used to get data from web Server.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 81-.By default which things are in the application?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 iPhone applications by default have 3 things\
1.main: entry point of application.\
2.Appdelegate: perform basic application and functionality.\
3.Window: provide uiinterface.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 82-Tell me about tab bar controller?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 It is used to display the data on the view.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 83-Which are the protocols used in table view?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Table view contain two delegate protocols\
(1) Uitable view data source\
(2).Uitable view delegate.\
ui view table view data source three method namely\
(1)No of sections.\
(2)No of rows in sections.\
(3)Cell for row index path row.\
In ui table view delegate contain\
(1)Did select row at index path row\
\
\pard\pardeftab720\sl360

\i0\b \cf5 84-Name data base used in iphone?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (1)Sql lite (2)Plist 3)Xml (4)Core Data\
\
\pard\pardeftab720\sl360

\i0\b \cf5 85-Tell four frameworks used in iphone?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (1)Ui kit framework\
(2)Map kit framework\
(3)ADI kit framework\
(4)Core data framework\
(5)core foundation framework\
\
\pard\pardeftab720\sl360

\i0\b \cf5 86-Tell me about single inheritance in objective-c?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Objective c subclass can derived from a single parent class.It is called \'93single inheritance\'94.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 87-Tell me about the MVC architecture?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 M-model, V-view, C-controller\
Main advantage of MVC architecture is to provide \'93reusability and security\'94 by separating the layer by using MVC architecture.\
\pard\pardeftab720\sl360

\b \cf6 Model:
\b0 \'a0it is a class model is interact with database.\

\b Controller:
\b0 \'a0controller is used for by getting the data from model and controls the views.\
Display the information in views. : View\
\
\pard\pardeftab720\sl360

\i0\b \cf5 88-What is the instance methods?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Instance methods are essentially code routines that perform tasks so instances of clases we create methods to get and set the instance variables and to display the current values of these variables.\
\
Declaration of instance method :\
\'96 (void)click me: (id)sender;\
Void is return type which does not giving any thing here.\
Click me is method name.\
Id is data type which returns any type of object.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 89-What is the class method?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Class methods work at the class level and are common to all instance of a class these methods are specific to the class overall as opposed to working on different instance data encapsulated in each class instance.\
@interface class name :ns object\
\{\
\}\
+(class name *)new alloc:\
-(int)total open\
\pard\pardeftab720\sl360

\i0 \cf5 \
\
\pard\pardeftab720\sl360

\b \cf5 90-What is data encapsulation?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Data is contained within objects and is not accessible by any other than via methods defined on the class is called data encapsulation.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 91-What is accessor methods?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Accessor methods are methods belonging to a class that allow to get and set the values of instance valuables contained within the class.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 92-What is synthesized accessor methods?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Objective-c provides a mechanism that automates the creation of accessor methods that are called synthesized accessor methods that are implemented through use of the @property and @synthesized.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 93-How to access the encapsulated data in objective-c?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 (a)Data encapsulation encourages the use of methods to +get and set the values of instance variables in a class.\
(b)But the developer to want to directly access an instance variable without having to go through an accessor method.\
(c) In objective-c syntax for an instance variable is as follow [class instance variable name]\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 94-What is dot notation?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Dot notation features introduced into version 2.0 of objective-c. Dot notation involves accessing an instance variable by specifying a class \'93instance\'94 followed by a \'93dot\'94 followed in turn by the name of instance variable or property to be accessed.\
\pard\pardeftab720\sl360

\i0\b \cf5 95-Difference between shallow copy and deep copy?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Shallow copy is also known as address copy. In this process you only copy address not actual data while in deep copy you copy data.\
Suppose there are two objects A and B. A is pointing to a different array while B is pointing to different array. Now what I will do is following to do shallow copy.\uc0\u8232 Char *A = \{\'91a\'92,\'92b\'92,\'92c\'92\};\u8232 Char *B = \{\'91x\'92,\'92y\'92,\'92z\'92\};\u8232 B = A;\u8232 Now B is pointing is at same location where A pointer is pointing.Both A and B in this case sharing same data. if change is made both will get altered value of data.Advantage is that coping process is very fast and is independent of size of array.\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 while in deep copy data is also copied. This process is slow but Both A and B have their own copies and changes made to any copy, other will copy will not be affected.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 96-Difference between categories and extensions?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Class extensions are similar to categories. The main difference is that with an extension, the compiler will expect you to implement the methods within your main @implementation, whereas with a category you have a separate @implementation block. So you should pretty much only use an extension at the top of your main .m file (the only place you should care about ivars, incidentally) \'97 it\'92s meant to be just that, an extension.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 97-What are KVO and KVC?
\b0 \
\pard\pardeftab720\sl360

\i\b \cf6 KVC:\'a0
\b0 Normally instance variables are accessed through properties or accessors but KVC gives another way to access variables in form of strings. In this way your class acts like a dictionary and your property name for example \'93age\'94 becomes key and value that property holds becomes value for that key. For example, you have employee class with name property.\
You access property like\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 NSString age = emp.age;\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 setting property value.\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 emp.age = @\'9420\uc0\u8243 ;\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 Now how KVC works is like this\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 [emp valueForKey:@"age"];\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 [emp setValue:@"25" forKey:@"age"];\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\b\fs26 \cf6 KVO :\'a0
\b0 The mechanism through which objects are notified when there is change in any of property is called KVO.\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 For example, person object is interested in getting notification when accountBalance property is changed in BankAccount object.To achieve this, Person Object must register as an observer of the BankAccount\'92s accountBalance property by sending an addObserver:forKeyPath:options:context: message.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 98-Can we use two tableview controllers on one view controller?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Yes, we can use two tableviews on the same view controllers and you can differentiate between two by assigning them tags\'85or you can also check them by comparing their memory addresses.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 99-Swap the two variable values without taking third variable?\uc0\u8232 
\b0 \
\pard\pardeftab720\sl360

\i \cf6 int x=10;\uc0\u8232 int y=5;\u8232 x=x+y;\u8232 NSLog(@\'94x==> %d\'94,x);\
y=x-y;\uc0\u8232 NSLog(@\'94Y Value==> %d\'94,y);\
\pard\pardeftab720\sl420

\fs28 \cf6 \
\pard\pardeftab720\sl360

\fs26 \cf6 x=x-y;\uc0\u8232 NSLog(@\'94x Value==> %d\'94,x);\
\
\pard\pardeftab720\sl360

\i0\b \cf5 100-What is push notification?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Imagine, you are looking for a job. You go to software company daily and ask sir \'93is there any job for me\'94 and they keep on saying no. Your time and money is wasted on each trip.(Pull Request mechanism)\
So, one day owner says, if there is any suitable job for you, I will let you know. In this mechanism, your time and money is not wasted. (Push Mechanism)\
\pard\pardeftab720\sl360

\i0\b \cf5 How it works?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 This service is provided by Apple in which rather than pinging server after specific interval for data which is also called pull mechanism, server will send notification to your device that there is new piece of information for you. Request is initiated by server not the device or client.\
\pard\pardeftab720\sl360

\i0\b \cf5 Flow of push notification
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Your web server sends message (device token + payload) to Apple push notification service (APNS) , then APNS routes this message to device whose device token specified in notification.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 101-What is polymorphism?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 This is very famous question and every interviewer asks this. Few people say polymorphism means multiple forms and they start giving example of draw function which is right to some extent but interviewer is looking for more detailed answer.\
Ability of base class pointer to call function from derived class at runtime is called polymorphism.\
For example, there is super class human and there are two subclasses software engineer and hardware engineer. Now super class human can hold reference to any of subclass because software engineer is kind of human. Suppose there is speak function in super class and every subclass has also speak function. So at runtime, super class reference is pointing to whatever subclass, speak function will be called of that class. I hope I am able to make you understand.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 101-What is responder chain?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Suppose you have a hierarchy of views such like there is superview A which have subview B and B has a subview C. Now you touch on inner most view C. The system will send touch event to subview C for handling this event. If C View does not want to handle this event, this event will be passed to its superview B (next responder). If B also does not want to handle this touch event it will pass on to superview A. All the view which can respond to touch events are called responder chain. A view can also pass its events to uiviewcontroller. If view controller also does not want to respond to touch event, it is passed to application object which discards this event.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 102-Can we use one tableview with two different datasources? How you will achieve this?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Yes. We can conditionally bind tableviews with two different data sources.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 103-What is a protocol?
\b0 \
\pard\pardeftab720\sl420

\i\fs28 \cf6 A protocol is a language feature in objective C which provides multiple inheritance in a single inheritance language. Objective C supports two types of protocols:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls6\ilvl0
\fs26 \cf7 {\listtext	\'95	}Ad hoc protocols called informal protocol\
{\listtext	\'95	}Compiler protocols called formal protocols\
\pard\pardeftab720\sl420

\fs28 \cf6 You must create your own autorelease pool as soon as the thread begins executing; otherwise, your application will leak objects\
\pard\pardeftab720\sl420

\i0\b \cf5 104-Three occasions when you might use your own autorelease pools:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls7\ilvl0
\i\fs26 \cf6 {\listtext	1.	}If you are writing a program that is not based on a UI framework, such as a command-line tool.\
{\listtext	2.	}If you write a loop that creates many temporary objects.You may create an autorelease pool inside the loop to dispose of those objects before the next iteration. Using an autorelease pool in the loop helps to reduce the maximum memory footprint of the application.\
{\listtext	3.	}If you spawn a secondary thread.\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 105- InApp purchase product type
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls8\ilvl0
\i\b\fs26 \cf6 {\listtext	1.	}Consumable
\b0 \'a0products must be purchased each time the user needs that item. For example, one-time services are commonly implemented as consumable products.\
\ls8\ilvl0
\b {\listtext	2.	}Non-consumable
\b0 \'a0products are purchased only once by a particular user. Once a non-consumable product is purchased, it is provided to all devices associated with that user\'92s iTunes account. Store Kit provides built-in support to restore non-consumable products on multiple devices.\
\ls8\ilvl0
\b {\listtext	3.	}Auto-renewable subscriptions\'a0
\b0 are delivered to all of a user\'92s devices in the same way as non-consumable products. However, auto-renewable subscriptions differ in other ways. When you create an auto-renewable subscription in iTunes Connect, you choose the duration of the subscription. The App Store automatically renews the subscription each time its term expires. If the user chooses to not allow the subscription to be renewed, the user\'92s access to the subscription is revoked after the subscription expires. Your application is responsible for validating whether a subscription is currently active and can also receive an updated receipt for the most recent transaction.\
\ls8\ilvl0
\b {\listtext	4.	}Free subscriptions
\b0 \'a0are a way for you to put free subscription content in Newsstand. Once a user signs up for a free subscription, the content is available on all devices associated with the user\'92s Apple ID. Free subscriptions do not expire and can only be offered in Newsstand-enabled apps\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 106-the advantages and disadvantages about synchronous versus asynchronous connections.
\b0 \
\pard\pardeftab720\sl420

\i \cf6 That\'92s it, pretty fast and easy, but there are a lot of caveats :\
\'95 The most important problem is that the thread which called this method will be blocked until the connection finish or timeout, so we surely don\'92t want to start the connection on the main thread to avoid freezing the UI. That means we need to create a new thread to handle the connection, and all programmers know that threading is hard.\
\'95 Cancellation, it\'92s not possible to cancel a synchronous connection, which is bad because users like to have the choice to cancel an operation if they think it takes too much time to execute.\
\'95 Authentication, there is no way to deal with authentication challenges.\
\'95 It\'92s impossible to parse data on the fly.\
So let\'92s put it up straight, avoid using synchronousNSURLConnection, there is absolutely no benefit of using it.\
It\'92s clear that\'a0
\b asynchronous connections
\b0 \'a0give us more control :\
\'95 You don\'92t have to create a new thread for the connection because your main thread will not be blocked.\
\'95 You can easily cancel the connection just by calling the\'a0cancelmethod.\
\'95 If you need authentication just implement the required delegate methods.\
\'95 Parsing data on the fly is easy.\
So clearly we have a lot of more control with this, and the code is really not difficult.\
Even better, we don\'92t have to handle the creation of a new thread, which is a good thing, because you know, threading is hard.\
Well, if you read me until here, you should be convinced to use asynchronous connections, and forget about synchronous ones. They clearly give us more control and possibilities and, in some case can spare us to create new thread.\
So I encourage you to move away from synchronous connections, just think of them as evil.\
\pard\pardeftab720\sl420

\i0\b \cf5 107-What is the navigation controller?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 Navigation controller contains the stack of controllers every navigation controller\
must be having root view controller by default these controllers contain 2 method\
(a) push view (b) pop view\
By default navigation controller contain \'93table view\'94.\
\pard\pardeftab720\sl420

\i0\b \cf5 108- What is the split view controller?
\b0 \
\pard\pardeftab720\sl420

\i \cf6 This control is used for ipad application and it contain proper controllers by default\
split view controller contain root view controller and detail view controller.\
\pard\pardeftab720\sl360

\i0\b\fs26 \cf5 109-Cocoa.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Cocoa is an application environment for both the Mac OS X operating system and iOS. It consists of a suite of object-oriented software libraries, a runtime system, and an integrated development environment. Carbon is an alternative environment in Mac OS X, but it is a compatibility framework with procedural programmatic interfaces intended to support existing Mac OS X code bases.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 110- Frameworks that make Cocoa.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Appkit (Application Kit)\
Foundation\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 111- Objective-C.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Objective-C is a very dynamic language. Its dynamism frees a program from compile-time and link-time constraints and shifts much of the responsibility for symbol resolution to runtime, when the user is in control. Objective-C is more dynamic than other programming languages because its dynamism springs from three sources:\
Dynamic typing\'97determining the class of an object at runtime\
Dynamic binding\'97determining the method to invoke at runtime\
Dynamic loading\'97adding new modules to a program at runtime\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 112- Objective-C vs C/C++.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'b7 The Objective-C class allows a method and a variable with the exact same name. In C++, they must be different.\
\'b7 Objective-C does not have a constructor or destructor. Instead it has init and dealloc methods, which must be called explicitly.\
\'b7 Objective-C uses + and \'96 to differentiate between factory and instance methods, C++ uses static to specify a factory method.\
\'b7 Multiple inheritance is not allowed in Obj-C, however we can use protocol to some extent.\
\'b7 Obj-C has runtime binding leading to dynamic linking.\
\'b7 Obj-C has got categories.\
\'b7 Objective-C has a work-around for method overloading, but none for operator overloading.\
\'b7 Objective-C also does not allow stack based objects. Each object must be a pointer to a block of memory.\
\'b7 In Objective-C the message overloading is faked by naming the parameters. C++ actually does the same thing but the compiler does the name mangling for us. In Objective-C, we have to mangle the names manually.\
\'b7 One of C++\'92s advantages and disadvantages is automatic type coercion.\
\'b7 Another feature C++ has that is missing in Objective-C is references. Because pointers can be used wherever a reference is used, there isn\'92t much need for references in general.\
\'b7 Templates are another feature that C++ has that Objective-C doesn\'92t. Templates are needed because C++ has strong typing and static binding that prevent generic classes, such as List and Array.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 113-Appilcation Kit/App kit.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 The Application Kit is a framework containing all the objects you need to implement your graphical, event-driven user interface: windows, panels, buttons, menus, scrollers, and text fields. The Application Kit handles all the details for you as it efficiently draws on the screen, communicates with hardware devices and screen buffers, clears areas of the screen before drawing, and clips views.\
You also have the choice at which level you use the Application Kit:\
\'b7 Use Interface Builder to create connections from user interface objects to your application objects.\
\'b7 Control the user interface programmatically, which requires more familiarity with AppKit classes and protocols.\
\'b7 Implement your own objects by subclassing NSView or other classes.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 114-Foundation Kit.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 The Foundation framework defines a base layer of Objective-C classes. In addition to providing a set of useful primitive object classes, it introduces several paradigms that define functionality not covered by the Objective-C language. The Foundation framework is designed with these goals in mind:\
\'b7 Provide a small set of basic utility classes.\
\'b7 Make software development easier by introducing consistent conventions for things such as deallocation.\
\'b7 Support Unicode strings, object persistence, and object distribution.\
\'b7 Provide a level of OS independence, to enhance portability.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 115-Dynamic and Static Typing.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Static typed languages are those in which type checking is done at compile-time, whereas dynamic typed languages are those in which type checking is done at run-time.\
Objective-C is a dynamically-typed language, meaning that you don\'92t have to tell the compiler what type of object you\'92re working with at compile time. Declaring a type for a varible is merely a promise which can be broken at runtime if the code leaves room for such a thing. You can declare your variables as type id, which is suitable for any Objective-C object.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 116-Selectors
\b0 \
\pard\pardeftab720\sl360

\i \cf6 In Objective-C, selector has two meanings. It can be used to refer simply to the name of a method when it\'92s used in a source-code message to an object. It also, though, refers to the unique identifier that replaces the name when the source code is compiled. Compiled selectors are of type SEL. All methods with the same name have the same selector. You can use a selector to invoke a method on an object\'97this provides the basis for the implementation of the target-action design pattern in Cocoa.\
[friend performSelector:@selector(gossipAbout:) withObject:aNeighbor];\
is equivalent to:\
[friend gossipAbout:aNeighbor];\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 117-Class Introspection
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'b7 Determine whether an objective-C object is an instance of a class\
[obj isMemberOfClass:someClass];\
\'b7 Determine whether an objective-C object is an instance of a class or its descendants\
[obj isKindOfClass:someClass];\
\'b7 The version of a class\
[MyString version]\
\'b7 Find the class of an Objective-C object\
Class c = [obj1 class]; Class c = [NSString class];\
\'b7 Verify 2 Objective-C objects are of the same class\
[obj1 class] == [obj2 class]\
\pard\pardeftab720\sl360

\i0\b \cf5 118- Proxy
\b0 \
\pard\pardeftab720\sl360

\i \cf6 As long as there aren\'92t any extra instance variables, any subclass can proxy itself as its superclass with a single call. Each class that inherits from the superclass, no matter where it comes from, will now inherit from the proxied subclass. Calling a method in the superclass will actually call the method in the subclass. For libraries where many objects inherit from a base class, proxying the superclass can be all that is needed.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 119- Why category is better than inheritance?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 If category is used, you can use same class, no need to remember a new class-name. Category created on a base class is available on sub classes.
\fs28 \
\pard\pardeftab720\sl420
\cf6 \
\pard\pardeftab720\sl420

\i0\b \cf5 120-Formal Protocols
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 Formal Protocols allow us to define the interface for a set of methods, but implementation is not done. Formal Protocols are useful when you are using DistributedObjects, because they allow you to define a protocol for communication between objects, so that the DO system doesn\'92t have to constantly check whether or not a certain method is implemented by the distant object.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 121- Formal vs informal protocol.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 In addition to formal protocols, you can also define an informal protocol by grouping the methods in a category declaration:\
@interface NSObject (MyProtocol)\
//someMethod();\
@end\
Informal protocols are typically declared as categories of the NSObject class, because that broadly associates the method names with any class that inherits from NSObject. Because all classes inherit from the root class, the methods aren\'92t restricted to any part of the inheritance hierarchy. (It is also possible to declare an informal protocol as a category of another class to limit it to a certain branch of the inheritance hierarchy, but there is little reason to do so.)\
When used to declare a protocol, a category interface doesn\'92t have a corresponding implementation. Instead, classes that implement the protocol declare the methods again in their own interface files and define them along with other methods in their implementation files.\
An informal protocol bends the rules of category declarations to list a group of methods but not associate them with any particular class or implementation.\
Being informal, protocols declared in categories don\'92t receive much language support. There\'92s no type checking at compile time nor a check at runtime to see whether an object conforms to the protocol. To get these benefits, you must use a formal protocol. An informal protocol may be useful when all the methods are optional, such as for a delegate, but (in Mac OS X v10.5 and later) it is typically better to use a formal protocol with optional methods.\
\
\
\pard\pardeftab720\sl360

\i0\b \cf5 122- Optional vs required
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Protocol methods can be marked as optional using the @optional keyword. Corresponding to the @optional modal keyword, there is a @required keyword to formally denote the semantics of the default behavior. You can use @optional and @required to partition your protocol into sections as you see fit. If you do not specify any keyword, the default is @required.\
@protocol MyProtocol\
@optional\
-(void) optionalMethod;\
@required\
-(void) requiredMethod;\
@end\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 123- Memory Management
\b0 \
\pard\pardeftab720\sl360

\i \cf6 If you alloc, retain, or copy/mutablecopy it, it\'92s your job to release it. Otherwise it isn\'92t.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 124-Copy vs assign vs retain
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'b7 Assign is for primitive values like BOOL, NSInteger or double. For objects use retain or copy, depending on if you want to keep a reference to the original object or make a copy of it.\
\'b7\'a0
\b assign
\b0 : In your setter method for the property, there is a simple assignment of your instance variable to the new value, eg:\
(void)setString:(NSString*)newString\{\uc0\u8232 \
string = newString;\
\uc0\u8232 \}\
This can cause problems since Objective-C objects use reference counting, and therefore by not retaining the object, there is a chance that the string could be deallocated whilst you are still using it.\
\'b7\'a0
\b retain
\b0 : this\'a0retains\'a0the new value in your setter method. For example:\
This is safer, since you explicitly state that you want to maintain a reference of the object, and you must release it before it will be deallocated.\
(void)setString:(NSString*)newString\{\uc0\u8232 \
[newString retain];\uc0\u8232 \
[string release];\uc0\u8232 \
string = newString;\uc0\u8232 \
\}\
\'b7\'a0
\b copy
\b0 : this makes a copy of the string in your setter method:\
This is often used with strings, since making a copy of the original object ensures that it is not changed whilst you are using it.\
(void)setString:(NSString*)newString\{\uc0\u8232 \
if(string!=newString)\{\uc0\u8232 \
[string release];\uc0\u8232 \
string = [newString copy];\uc0\u8232 \
\}\
\uc0\u8232 \}\
\
\
\pard\pardeftab720\sl360

\i0\b \cf5 125- alloc vs new
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'93alloc\'94 creates a new memory location but doesn\'92t initializes it as compared to \'93new\'94.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 126- release vs pool drain
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'93release\'94 frees a memory. \'93drain\'94 releases the NSAutoreleasePool itself.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 127- NSAutoReleasePool : release vs drain
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Strictly speaking, from the big picture perspective drain is not equivalent to release:\
In a reference-counted environment, drain does perform the same operations as release, so the two are in that sense equivalent. To emphasise, this means you do not leak a pool if you use drain rather than release.\
In a garbage-collected environment, release is a no-op. Thus it has no effect. drain, on the other hand, contains a hint to the collector that it should \'93collect if needed\'94. Thus in a garbage-collected environment, using drain helps the system balance collection sweeps.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 128-autorelease vs release
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Autorelase: By sending an object an autorelease message, it is added to the local AutoReleasePool, and you no longer have to worry about it, because when the AutoReleasePool is destroyed (as happens in the course of event processing by the system) the object will receive a release message, its RetainCount will be decremented, and the GarbageCollection system will destroy the object if the RetainCount is zero.\
Release: retain count is decremented at this point.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 129- Autorelease Pool
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Autorelease pools provide a mechanism whereby you can send an object a \'93deferred\'94 release message. This is useful in situations where you want to relinquish ownership of an object, but want to avoid the possibility of it being deallocated immediately (such as when you return an object from a method). Typically, you don\'92t need to create your own autorelease pools, but there are some situations in which either you must or it is beneficial to do so.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 130- How autorelease pool is managed.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Every time -autorelease is sent to an object, it is added to the inner-most autorelease pool. When the pool is drained, it simply sends -release to all the objects in the pool.\
Autorelease pools are simply a convenience that allows you to defer sending -release until \'93later\'94. That \'93later\'94 can happen in several places, but the most common in Cocoa GUI apps is at the end of the current run loop cycle.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 131-Memory Leak
\b0 \
\pard\pardeftab720\sl360

\i \cf6 If RetainingAndReleasing are not properly used then RetainCount for AnObject doesn\'92t reach 0. It doesn\'92t crash the application.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 132- Event Loop
\b0 \
\pard\pardeftab720\sl360

\i \cf6 In a Cocoa application, user activities result in events. These might be mouse clicks or drags, typing on the keyboard, choosing a menu item, and so on. Other events can be generated automatically, for example a timer firing periodically, or something coming in over the network. For each event, Cocoa expects there to be an object or group of objects ready to handle that event appropriately. The event loop is where such events are detected and routed off to the appropriate place. Whenever Cocoa is not doing anything else, it is sitting in the event loop waiting for an event to arrive. (In fact, Cocoa doesn\'92t poll for events as suggested, but instead its main thread goes to sleep. When an event arrives, the OS wakes up the thread and event processing resumes. This is much more efficient than polling and allows other applications to run more smoothly).\
Each event is handled as an individual thing, then the event loop gets the next event, and so on. If an event causes an update to be required, this is checked at the end of the event and if needed, and window refreshes are carried out.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 133-Differnce between boxName and self.boxName.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 boxName: Accessing directly.\
self. boxName: Accessing boxName through accessors. If property/synthesize is not there it will throw error.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 134-What it does \'93@synthesize boxDescription=boxName;\'94 ?
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Here you can use boxName or self.boxName. We cant use boxDescription.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 135-Collection
\b0 \
\pard\pardeftab720\sl360

\i \cf6 In Cocoa and Cocoa Touch, a collection is a Foundation framework class used for storing and managing groups of objects. Its primary role is to store objects in the form of either an array, a dictionary, or a set.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 136-Threads and how to use
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Use this class when you want to have an Objective-C method run in its own thread of execution. Threads are especially useful when you need to perform a lengthy task, but don\'92t want it to block the execution of the rest of the application. In particular, you can use threads to avoid blocking the main thread of the application, which handles user interface and event-related actions. Threads can also be used to divide a large job into several smaller jobs, which can lead to performance increases on multi-core computers.\
Two ways to create threads\'85\
\'b7 detachNewThreadSelector:toTarget:withObject:\
\'b7 Create instances of NSThread and start them at a later time using the \'93start\'94 method.\
NSThread is not as capable as Java\'92s Thread class, it lacks\
\'b7 Built-in communication system.\
\'b7 An equivalent of \'93join()\'94\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 137-Threadsafe
\b0 \
\pard\pardeftab720\sl360

\i \cf6 When it comes to threaded applications, nothing causes more fear or confusion than the issue of handling signals. Signals are a low-level BSD mechanism that can be used to deliver information to a process or manipulate it in some way. Some programs use signals to detect certain events, such as the death of a child process. The system uses signals to terminate runaway processes and communicate other types of information.\
The problem with signals is not what they do, but their behavior when your application has multiple threads. In a single-threaded application, all signal handlers run on the main thread. In a multithreaded application, signals that are not tied to a specific hardware error (such as an illegal instruction) are delivered to whichever thread happens to be running at the time. If multiple threads are running simultaneously, the signal is delivered to whichever one the system happens to pick. In other words, signals can be delivered to any thread of your application.\
The first rule for implementing signal handlers in applications is to avoid assumptions about which thread is handling the signal. If a specific thread wants to handle a given signal, you need to work out some way of notifying that thread when the signal arrives. You cannot just assume that installation of a signal handler from that thread will result in the signal being delivered to the same thread.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 138-Notification and Observers
\b0 \
\pard\pardeftab720\sl360

\i \cf6 A notification is a message sent to one or more observing objects to inform them of an event in a program. The notification mechanism of Cocoa follows a\'a0
\b broadcast
\b0 \'a0model. It is a way for an object that initiates or handles a program event to communicate with any number of objects that want to know about that event. These recipients of the notification, known as observers, can adjust their own appearance, behavior, and state in response to the event. The object sending (or posting) the notification doesn\'92t have to know what those observers are. Notification is thus a powerful mechanism for attaining coordination and cohesion in a program. It reduces the need for strong dependencies between objects in a program (such dependencies would reduce the reusability of those objects). Many classes of the Foundation, AppKit, and other Objective-C frameworks define notifications that your program can register to observe.\
The centerpiece of the notification mechanism is a per-process singleton object known as the notification center (
\b NSNotificationCenter
\b0 ). When an object posts a notification, it goes to the notification center, which acts as a kind of clearing house and broadcast center for notifications. Objects that need to know about an event elsewhere in the application register with the notification center to let it know they want to be notified when that event happens. Although the notification center delivers a notification to its observers synchronously, you can post notifications asynchronously using a notification queue (NSNotificationQueue).\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 139-Delegate vs Notification
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'b7 The concept of notification differs from delegation in that it allows a message to be sent to more than one object. It is more like a broadcast rather than a straight communication between two objects. It removes dependencies between the sending and receiving object(s) by using a notification center to manage the sending and receiving of notifications. The sender does not need to know if there are any receivers registered with the notification center. There can be one, many or even no receivers of the notification registered with the notification center. Simply, Delegate is 1-to-1 object and Notification can be *-to-* objects.\
\'b7 The other difference between notifications and delegates is that there is no possibility for the receiver of a notification to return a value to the sender.\
\'b7 Typical uses of notifications might be to allow different objects with an application to be informed of an event such as a file download completing or a user changing an application preference. The receiver of the notification might then perform additional actions such as processing the downloaded file or updating the display.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 140-Plist
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Property lists organize data into named values and lists of values using several object types. These types give you the means to produce data that is meaningfully structured, transportable, storable, and accessible, but still as efficient as possible. Property lists are frequently used by applications running on both Mac OS X and iOS. The property-list programming interfaces for Cocoa and Core Foundation allow you to convert hierarchically structured combinations of these basic types of objects to and from standard XML. You can save the XML data to disk and later use it to reconstruct the original objects.\
The user defaults system, which you programmatically access through the NSUserDefaults class, uses property lists to store objects representing user preferences. This limitation would seem to exclude many kinds of objects, such as NSColor and NSFont objects, from the user default system. But if objects conform to the NSCoding protocol they can be archived to NSData objects, which are property list\'96compatible objects\
\
\pard\pardeftab720\sl360

\i0\b \cf5 141-Helper Objects
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Helper Objects are used throughout Cocoa and CocoaTouch, and usually take the form of a delegate or dataSource. They are commonly used to add functionality to an existing class without having to subclass it.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 142-Cluster Class
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Class clusters are a design pattern that the Foundation framework makes extensive use of. Class clusters group a number of private concrete subclasses under a public abstract superclass. The grouping of classes in this way simplifies the publicly visible architecture of an object-oriented framework without reducing its functional richness.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 143-Differentiate Foundation vs Core Foundation
\b0 \
\pard\pardeftab720\sl360

\i \cf6 CoreFoundation is a general-purpose C framework whereas Foundation is a general-purpose Objective-C framework. Both provide collection classes, run loops, etc, and many of the Foundation classes are wrappers around the CF equivalents. CF is mostly open-source , and Foundation is closed-source.\
\pard\pardeftab720\sl360

\b \cf6 Core Foundation
\b0 \'a0is the C-level API, which provides CFString, CFDictionary and the like.
\b Foundation
\b0 \'a0is Objective-C, which provides NSString, NSDictionary, etc. CoreFoundation is written in C while Foundation is written in Objective-C. Foundation has\'a0a lot\'a0more classes CoreFoundation is the common base of Foundation and Carbon.\
\
\pard\pardeftab720\sl360

\i0\b \cf5 144-Difference between coreData and Database
\b0 \
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360

\i\b\fs24 \cf6 Database
\b0 \cell 
\pard\intbl\itap1\pardeftab720\sl360

\b \cf6 Core Data
\b0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Primary function is storing and fetching data\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Primary function is graph management (although reading and writing to disk is an important supporting feature)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Operates on data stored on disk (or minimally and incrementally loaded)\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Operates on objects stored in memory (although they can be lazily loaded from disk)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Stores \'93dumb\'94 data\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Works with fully-fledged objects that self-manage a lot of their behavior and can be subclassed and customized for further behaviors\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Can be transactional, thread-safe, multi-user\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Non-transactional, single threaded, single user (unless you create an entire abstraction around Core Data which provides these things)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Can drop tables and edit data without loading into memory\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Only operates in memory\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Perpetually saved to disk (and often crash resilient)\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Requires a save process\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Can be slow to create millions of new rows\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Can create millions of new objects in-memory very quickly (although saving these objects will be slow)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart120 \tamarb240 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clcbpat9 \clwWidth6500\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx4320
\clvertalt\clvertalbase \clcbpat9 \clwWidth6840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl180 \clpadb80 \clpadr180 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Offers data constraints like \'93unique\'94 keys\cell 
\pard\intbl\itap1\pardeftab720\sl360
\cf6 Leaves data constraints to the business logic side of the program\cell \lastrow\row
\pard\pardeftab720\sl360

\i0\fs26 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 145- Core data vs sqlite.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Core data is an object graph management framework. It manages a potentially very large graph of object instances, allowing an app to work with a graph that would not entirely fit into memory by faulting objects in and out of memory as necessary. Core Data also manages constraints on properties and relationships and maintains reference integrity (e.g. keeping forward and backwards links consistent when objects are added/removed to/from a relationship). Core Data is thus an ideal framework for building the \'93model\'94 component of an MVC architecture.\
To implement its graph management, Core Data\'a0happens\'a0to use sqlite as a disk store. Itcould\'a0have been implemented using a different relational database or even a non-relational database such as CouchDB. As others have pointed out, Core Data can also use XML or a binary format or a user-written atomic format as a backend (though these options require that the entire object graph fit into memory).\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 146-Retain cycle or Retain loop.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 When object A retains object B, and object B retains A. Then Retain cycle happens. To overcome this use \'93close\'94 method.\
Objective-C\'92s garbage collector (when enabled) can also delete retain-loop groups but this is not relevant on the iPhone, where Objective-C garbage collection is not supported.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 147-What is unnamed category.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 A named category \'97\'a0
\b @interface Foo(FooCategory)
\b0 \'a0\'97 is generally used to:\
i. Extend an existing class by adding functionality.\
ii. Declare a set of methods that might or might not be implemented by a delegate.\
\
Unnamed Categories has fallen out of favor now that @protocol has been extended to support @optional methods.\
A class extension \'97\'a0
\b @interface Foo()
\b0 \'a0\'97 is designed to allow you to declare additional private API \'97 SPI or System Programming Interface \'97 that is used to implement the class innards. This typically appears at the top of the .m file. Any methods / properties declared in the class extension must be implemented in the @implementation, just like the methods/properties found in the public @interface.\
Class extensions can also be used to redeclare a publicly readonly @property as readwrite prior to @synthesize\'92ing the accessors.\
Example:\
\pard\pardeftab720\sl360

\b \cf6 Foo.h
\b0 \
@interface Foo:NSObject\
@property(readonly, copy) NSString *bar;\
-(void) publicSaucing;\
@end\

\b Foo.m
\b0 \
@interface Foo()\
@property(readwrite, copy) NSString *bar;\
\'96 (void) superSecretInternalSaucing;\
@end\
@implementation Foo\
@synthesize bar;\
\'85. must implement the two methods or compiler will warn \'85.\
@end\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 148-Copy vs mutableCopy.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 copy always creates an immutable copy.\
mutableCopy always creates a mutable copy.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 149- Strong vs Weak
\b0 \
\pard\pardeftab720\sl360

\i \cf6 The strong and weak are new ARC types replacing retain and assign respectively.\
Delegates and outlets should be weak.\
A\'a0
\b strong reference
\b0 \'a0is a reference to an object that stops it from being deallocated. In other words it creates a owner relationship.\
A\'a0
\b weak reference
\b0 \'a0is a reference to an object that does not stop it from being deallocated. In other words, it does not create an owner relationship.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 150-__strong, __weak, __unsafe_unretained, __autoreleasing.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Generally speaking, these extra qualifiers don\'92t need to be used very often. You might first encounter these qualifiers and others when using the migration tool. For new projects however, you generally you won\'92t need them and will mostly use strong/weak with your declared properties.\
\pard\pardeftab720\sl360

\b \cf6 __strong
\b0 \'a0\'96 is the default so you don\'92t need to type it. This means any object created using alloc/init is retained for the lifetime of its current scope. The \'93current scope\'94 usually means the braces in which the variable is declared\

\b __weak
\b0 \'a0\'96 means the object can be destroyed at anytime. This is only useful if the object is somehow strongly referenced somewhere else. When destroyed, a variable with __weak is set to nil.\

\b __unsafe_unretained
\b0 \'a0\'96 is just like __weak but the pointer is not set to nil when the object is deallocated. Instead the pointer is left dangling.\

\b __autoreleasing
\b0 , not to be confused with calling autorelease on an object before returning it from a method, this is used for passing objects by reference, for example when passing NSError objects by reference such as [myObject performOperationWithError:&tmp];\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 151-Types of NSTableView
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Cell based and View based. In view based we can put multiple objects.\
\pard\pardeftab720\sl420

\i0\b\fs28 \cf5 152-Abstract class in cocoa.
\b0 \
\pard\pardeftab720\sl360

\i\fs26 \cf6 Cocoa doesn\'92t provide anything called abstract. We can create a class abstract which gets check only at runtime, compile time this is not checked.\
@interface AbstractClass : NSObject\
@end\
@implementation AbstractClass\
+ (id)alloc\{\
if (self == [AbstractClass class]) \{\
NSLog(@\'94Abstract Class cant be used\'94);\
\}\
return [super alloc];\
@end\
\
\pard\pardeftab720\sl360

\i0\b \cf5 153- Difference between HTTP and HTTPS.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 \'b7 HTTP stands for\'a0{\field{\*\fldinst{HYPERLINK "http://www.blogger.com/blogger.g?blogID=2378569646178591916"}}{\fldrslt \cf8 HyperText}}\'a0Transfer\'a0{\field{\*\fldinst{HYPERLINK "http://www.blogger.com/blogger.g?blogID=2378569646178591916"}}{\fldrslt \cf8 Protocol}}, whereas, HTTPS is HyperText Transfer Protocol\'a0{\field{\*\fldinst{HYPERLINK "http://www.blogger.com/blogger.g?blogID=2378569646178591916"}}{\fldrslt \cf8 Secure}}.\
\'b7 HTTP transmits everything as plan text, while HTTPS provides encrypted communication, so that only the recipient can decrypt and read the information. Basically, HTTPS is a combination of HTTP and{\field{\*\fldinst{HYPERLINK "http://www.blogger.com/blogger.g?blogID=2378569646178591916"}}{\fldrslt \cf8 SSL}}\'a0(Secure Sockets Layer). This SSL is that protocol which encrypts the data.\
\'b7 HTTP is fast and cheap, where HTTPS is slow and expensive.\
As, HTTPS is safe it\'92s widely used during payment transactions or any sensitive transactions over the internet. On the other hand, HTTP is used most of the sites over the net, even this blogspot sites also use HTTP.\
\'b7 HTTP URLs starts with \'93http:// \'93 and use\'a0{\field{\*\fldinst{HYPERLINK "http://www.blogger.com/blogger.g?blogID=2378569646178591916"}}{\fldrslt \cf8 port}}\'a080 by default, while HTTPS URLs stars with \'93https:// \'93 and use port 443.\
\'b7 HTTP is unsafe from attacks like\'a0{\field{\*\fldinst{HYPERLINK "http://en.support.wordpress.com/affiliate-links/"}}{\fldrslt \cf8 man-in-the-middle}}\'a0and eavesdropping, but HTTPS is secure from these sorts of attacks.\
\
\
\pard\pardeftab720\sl360

\i0\b \cf5 154-GCD
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Grand Central Dispatch is not just a new abstraction around what we\'92ve already been using, it\'92s an entire new underlying mechanism that makes multithreading easier and makes it easy to be as concurrent as your code can be without worrying about the variables like how much work your CPU cores are doing, how many CPU cores you have and how much threads you should spawn in response. You just use the Grand Central Dispatch API\'92s and it handles the work of doing the appropriate amount of work. This is also not just in Cocoa, anything running on Mac OS X 10.6 Snow Leopard can take advantage of Grand Central Dispatch ( libdispatch ) because it\'92s included in libSystem.dylib and all you need to do is include #import <dispatch/dispatch.h> in your app and you\'92ll be able to take advantage of Grand Central Dispatch.\
\pard\pardeftab720\sl360

\i0 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 155-How you attain the backward compatibility?
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380
\ls9\ilvl0
\i \cf6 {\listtext	1.	}Set the Base SDK to Current version of Mac (ex. 10.7)
\fs28 \uc0\u8232 
\i0\fs26 \cf5 \
\ls9\ilvl0
\i \cf6 {\listtext	2.	}Set the Deployment SDK to older version (ex.1.4)
\fs28 \uc0\u8232 
\i0\fs26 \cf5 \
\pard\pardeftab720\sl360

\b \cf5 156-Call Back.
\b0 \
\pard\pardeftab720\sl360

\i \cf6 Synchronous operations are ones that happen in step with your calling code. Most of Cocoa works this way: you send a message to an object, say to format a string, etc, and by the time that line of code is \'93done\'94, the operation is complete.\
But in the real world, some operations take longer than \'93instantaneous\'94 (some intensive graphics work, but mainly high or variably latency things like disk I/O or worse, network connectivity). These operations are unpredictable, and if the code were to block until finish, it might block indefinitely or forever, and that\'92s no good.\
So the way we handle this is to set up \'93callbacks\'94\'96 you say \'93go off and do this operation, and when you\'92re done, call this other function\'94. Then inside that \'93callback\'94 function, you start the second operation that depends on the first. In this way, you\'92re not spinning in circles waiting, you just get called \'93asynchronously\'94 when each task is done.\
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl260
\ls10\ilvl0
\f1\i0\b \cf11 {\listtext	1.	}What is heap fragmentation? \'a0
\b0 Any question that gets us talking about memory is a great question in my book so I love this one. \'a0Heap fragmentation happens when you allocate many small objects and then remove them randomly, the pages then end up having lots of little available blocks but no big blocks. \'a0On the mac (and presumably on iOS although nobody except a few engineers at Apple are 100% sure of that) {\field{\*\fldinst{HYPERLINK "http://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html"}}{\fldrslt \cf12 the system is quite a bit more complex}}. \'a0Our malloc returns blocks sized closely to the requested size, this tends to limit the effects of fragmentation as there won\'92t often be 1/2 used blocks hanging around.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls10\ilvl0
\b \cf11 {\listtext	2.	}What does an array look like in memory?\'a0
\b0 Here I\'92m looking for 2 keywords in the answer: Contiguous and Ordered. \'a0The candidate should know that arrays are normally allocated in one big block in memory and all in order \'97 that\'92s why pointer math works on arrays. \'a0A natural follow-up to this is 
\b What\'92s a non-contiguous alternative data structure to arrays? \'a0
\b0 Linked-lists of course, and now you can have a great discussion about performance trade-offs and characteristics between the two data structures.\
\ls10\ilvl0
\b {\listtext	3.	}On mobile devices what are three metrics that we usually optimize for? \'a0
\b0 Speed and Memory are the obvious answers, power is the one most people won\'92t think up on the spot. \'a0And that\'92s ok, the point of this question is to talk about what it means to optimize for power consumption. \'a0Talk about some of the APIs that are especially bad for power (Location, Drawing, Networking) and then what are some things you can do to mitigate these APIs. \'a0For location tracking you can switch to wider range tracking when the app is in the background, for drawing you just make sure never to draw the same content if it hasn\'92t changed (called overdraw), finally for networking there are tons of techniques but batching calls, downloading as much as possible in a single call is one of the best.\
\ls10\ilvl0
\b {\listtext	4.	}What can you do if you views aren\'92t scrolling smoothly? \'a0
\b0 Once again there are many techniques to use here and you may even learn some new ones from the candidate. \'a0A common technique is to use the \'93ShouldRasterize\'94 flag to cause content to be cached as it scrolls (make sure to discuss the drawbacks of this, such as fuzzy content, incompatibility with rapidly changing content and extra memory usage). \'a0Some less common techniques are to make sure you use {\field{\*\fldinst{HYPERLINK "http://markpospesel.wordpress.com/2012/04/03/on-the-importance-of-setting-shadowpath/"}}{\fldrslt \cf12 shadow paths}} if you have shadows on any of your views. \'a0A final technique that can be a bit trickier is to pre-render mask images rather than drawing them on the fly with core-graphics, an example of this would be to render a png with a transparent circle and solid corners, place that png over an image in your view to create a circular image, this is much faster than using corner radius to create circular images.\
\pard\pardeftab720\sl480\sa200

\fs36 \cf11 Debugging\
\pard\pardeftab720\sl400\sa390

\fs26 \cf11 This is a recent addition to my interviewing curriculum, but I\'92ve realized that it is of critical importance. \'a0Every engineer ends up debugging code and making sure they can do that effectively before you hire them is crucial.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl260
\ls11\ilvl0
\b \cf11 {\listtext	1.	}What does exc_bad_access mean? \'a0
\b0 Everyone has seen that error code in a crash dump, but what does it really mean? \'a0The answer is pretty simple, it means you tried to access something that doesn\'92t belong to you. \'a0Its more interesting to get into a discussion about why that might happen. \'a0It could be that you tried to access a pointer very low in the heap, for example if you were accidentally dereferencing the value of a counter variable you may dereference memory address 10 or something. \'a0Another very common cause is that you let an object\'92s retain count reach 0, then the system gave that page to a different application but you still had a pointer to that object and tried to use it \'97 that memory doesn\'92t belong to you anymore.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls11\ilvl0
\b \cf11 {\listtext	2.	}If you present and dismiss a modal view controller 100 times and then your application crashes from low memory, how can you debug this?\'a0
\b0  The answer is to use the allocations instruments tool, and specifically the heap snapshot feature. \'a0You just snapshot once before presenting the controller and again after dismissing it, then look at the delta for any objects that should have been released. \'a0I go over this technique in detail in {\field{\*\fldinst{HYPERLINK "http://www.200monkeys.com/index.php/2013/03/12/fixing-memory-leaks-in-a-post-arc-world/"}}{\fldrslt \cf12 this article}}.\
\ls11\ilvl0
\b {\listtext	3.	}Your application is hanging after a certain user interaction, how would you debug this?
\b0  \'a0There are many correct approaches to this. \'a0You can either try to attack the problem using the performance instrument and see if something is in an infinite loop, you can examine the code to find what happens after these user actions and use breakpoints to troubleshoot further. \'a0Another trick you could use if the application talks to a server is to run a proxy on your client and observe the network calls to see if there is one that never returns or returns unexpected data.\
\pard\pardeftab720\sl400\sa390
\cf11 I hope you enjoyed reading a bit more of my thoughts on iOS technical interviewing. \'a0This article was more slanted towards the interviewer, however if you are preparing for an interview its not hard to flip these around. \'a0For example you should expect to be asked about recent technology announcements in your field, technical books and such \'97 so make sure you have some answers prepared. \'a0Feel free to leave any comments, corrections or suggestions. \'a0Happy Interviewing!\
\pard\pardeftab720

\f2\b\fs28 \cf7 \'97- Objective-C related \'97-\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0
\b0\fs26 \cf7 {\listtext	\'95	}identify basic OO concepts and the keywords Objective-C uses (interface, implementation, property, protocol, etc)\
{\listtext	\'95	}what is a designated initializer, what is the pattern for the initializers and why ( if (self = [super ...] ) )\
{\listtext	\'95	}basic memory management topics, like ownership retain/release/autorelease\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what happens if you add your just created object to a mutable array, and you release your object\
{\listtext	\uc0\u9702 	}what happens if the array is released\
{\listtext	\uc0\u9702 	}what happens if you remove the object from the array, and you try to use it\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}trick: garbage collection on iPhone\
{\listtext	\'95	}autorelease pool usage\
{\listtext	\'95	}property declarations ( assign, nonatomic, readonly, retain, copy )\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}trick: ask about the nonexistent atomic keyword, what does atomic mean\
{\listtext	\uc0\u9702 	}ask on how to correctly implement a retaining setter property\
{\listtext	\uc0\u9702 	}ask about the circular reference problem and delegates being usually saved with assign rather then retain\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what is the difference between the dot notation and using the square brackets\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what happens when we invoke a method on a nil pointer\
{\listtext	\uc0\u9702 	}difference between nil and Nil\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what is KVO and related theory + methods to use when observing\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}does KVO work with ivars too?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}protocols \'96 maybe: main difference between c#/java interface and protocols\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what to do in a situation when a class doesn\'92t implement a method from a protocol\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what about multiple class inheritance\
{\listtext	\'95	}what is fast enumeration\
{\listtext	\'95	}class methods vs instance methods\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}visibility of methods\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what is an actual class in Objective-c (struct)\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}ask about the isa member\
{\listtext	\uc0\u9702 	}ask about isKindOfClass isMemberOfClass\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}root classes: NSObject, NSProxy\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}how does proxy-ing work\
{\listtext	\uc0\u9702 	}how to fake multiple class inheritance\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}id type\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what happens during compilation if we invoke a method on an variable with the type id\
{\listtext	\uc0\u9702 	}what happens runtime if the method exists\
{\listtext	\uc0\u9702 	}what happens if the methods doesn\'92t exist\
{\listtext	\uc0\u9702 	}pro and cons of using the type id\
{\listtext	\uc0\u9702 	}what happens here(compile + runtime): NSString *s = [NSNumber numberWithInt:3]; int i = [s intValue];\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what are class categories and the () category\
{\listtext	\'95	}what is an informal protocol\
{\listtext	\'95	}what is a delegate, how to create one, and use one\
{\listtext	\'95	}what is a selector, how to do a perform selector\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}how to delay executing a selector\
{\listtext	\uc0\u9702 	}what to do when the selector has more paramters (NSInvocation>\
{\listtext	\uc0\u9702 	}how to start a selector on a background thread\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}how to start a thread\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what is the first thing to do on a thread (autorelease pool)\
{\listtext	\uc0\u9702 	}what is a runloop, and one very common place where it is used (timers, nsurlconnection)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}how to download something from the internet\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa65
\ls12\ilvl1\cf7 {\listtext	\uc0\u9702 	}what is the difference between a synchronous and an asynchronous request\
{\listtext	\uc0\u9702 	}small task: explain how to download an image from the internet, and show this in an image view \'96 all this after a button is tapped on the view\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls12\ilvl0\cf7 {\listtext	\'95	}what are notifications, how to use them\
{\listtext	\'95	}what is a memory warning, how do we respond to it\
\pard\pardeftab720\sl360
\cf7 \
\pard\pardeftab720\sl360

\b\fs30 \cf7 \'97- A bit more advanced topics \'97-\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls13\ilvl0
\b0\fs26 \cf7 {\listtext	\'95	}when to use retainCount (never, and why)\
{\listtext	\'95	}why shouldn\'92t we invoke instance methods in an initializer and the dealloc\
{\listtext	\'95	}NSCoding, archiving\
{\listtext	\'95	}NSCopying, why can\'92t we simply use our own objects as key in a dictionary, what to do to solve the problem ( and the difference between a shallow and a deep copy)\
\pard\pardeftab720\sl360
\cf7 \
\pard\pardeftab720\sl360

\b\fs30 \cf7 \'97- UIKit related \'97-\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls14\ilvl0
\b0\fs26 \cf7 {\listtext	\'95	}what is a view, and a window\
{\listtext	\'95	}difference between a view\'92s bounds and frame\
{\listtext	\'95	}what is the resolution of the current available devices, difference between points and pixels (starting with iOS4)\
{\listtext	\'95	}what is the responder chain, becomeFirstResponder\
{\listtext	\'95	}what do IBOutlet and IBAction mean, what are they preprocessed to\
{\listtext	\'95	}how do tableviews function\
{\listtext	\'95	}what about multithreading and UIKit\
{\listtext	\'95	}what to do when the keyboard appears and hides some parts of the UI that are important\
{\listtext	\'95	}why should we release the outlets in viewDidUnload\
{\listtext	\'95	}what is awakeFromNib, what is the difference between a nib and a xib\
\pard\pardeftab720\sl360
\cf7 \
\pard\pardeftab720\sl360

\b\fs30 \cf7 \'97- CoreData \'97-\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa65
\ls15\ilvl0
\b0\fs26 \cf7 {\listtext	\'95	}what is a context\
{\listtext	\'95	}what about multi threading and core data usage\
{\listtext	\'95	}what is an NSManagedObjectId \'96 can we save it for later if the application was stopped\
{\listtext	\'95	}what types of stores does core data support\
{\listtext	\'95	}what is lazy loading, how does this relate to core data, situations when this can be handy\
{\listtext	\'95	}how to ready only a few attributes of an entity\
{\listtext	\'95	}what is an fetch result controller\
{\listtext	\'95	}how to synchronize contexts\
{\listtext	\'95	}how could one simulate an NSManagedObject (i\'92m thinking of the fact that all the properties are dynamic and not synthesized)\
\pard\pardeftab720\sl360

\i \cf6 \
\
\pard\pardeftab720

\f6\i0\fs32 \cf13 \cb14 1.What is latest iOS version?\cb15 \
\pard\pardeftab720
\cf16 \cb14 IOS - 6.1.3 (updated on\'a0
\f7\fs26 \cf17 5/15/13 3:15 AM
\f6\fs32 \cf16 \cb15 \
\pard\pardeftab720

\f7\fs26 \cf17 \cb14 Pacific Daylight Time
\f6\fs32 \cf16 )\cb15 \
\pard\pardeftab720
\cf13 \cb14 2.What is latest Xcode version?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Xcode- 4.6.2\'a0(updated on\'a0
\f7\fs26 \cf17 5/15/13 3:15 AM
\f6\fs32 \cf16 \cb15 \
\pard\pardeftab720

\f7\fs26 \cf17 \cb14 Pacific Daylight Time
\f6\fs32 \cf16 )\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
\
3.What is latest mac os version?\cb15 \
\cb14 \'a0\cf16 Mac- Mountain Lion\'a0(updated on\'a0
\f7\fs26 \cf17 5/15/13 3:15 AM
\f6\fs32 \cf16 \cb15 \
\pard\pardeftab720

\f7\fs26 \cf17 \cb14 Pacific Daylight Time
\f6\fs32 \cf16 )\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
4.What is iPad screen size?\cb15 \
\pard\pardeftab720
\cf16 \cb14 1024X768\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
5.what is iPhone screen size?\cb15 \
\pard\pardeftab720
\cf16 \cb14 320X480\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
6.What are the features is IOS 6?\cb15 \
\cb14 \
\pard\pardeftab720
\cf16 1.Map :beautifully designed from the ground up (and the sky down)\cb15 \
\cb14 2.Integration of Facebook with iOS\cb15 \
\cb14 3.shared photo streams.\cb15 \
\cb14 4.Passbook - boarding passes, loyalty cards, retail coupons, cinema tickets and more all in one place\cb15 \
\cb14 5.Facetime - on mobile network as wifi\'a0\cb15 \
\cb14 6.changed Phone app - *remind me later,*reply with message.\cb15 \
\cb14 7.Mail - redesigned more streamline interface.\cb15 \
\cb14 8.Camera with panorama .\'a0\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
7.Who invented Objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Broad cox and Tom Love\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
8.What is Cococa and cocoa touch?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Cocoa is for Mac App development\'a0 and cocoa touch is for apples touch devices - that provide all development environment\'a0\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
9.What is Objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 *Objective-C is a reflective, object-oriented programming language which adds Smalltalk-style messaging to the C programming language. strictly superset of c.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
10. how declare methods in Objective c? and how to call them?\cb15 \
\pard\pardeftab720
\cf16 \cb14 \'a0- (return_type)methodName:(data_type)parameter_name : (data_type)parameter_name\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
11. What is property in Objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Property allow declared variables with specification like atomic/nonatmic, or retain/assign\'a0\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
12.What is meaning of "copy" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 copy object during assignment and increases retain count by 1\cb15 \
\pard\pardeftab720
\cf13 \cb14 13.What is meaning of "readOnly" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 \'a0Declare read only object / declare only getter method\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
14.What is meaning of "retain" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Specifies that retain should be invoked on the object upon assignment. takes ownership of an object\cb15 \
\pard\pardeftab720
\cf13 \cb14 15.What is meaning of "assign" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Specifies that the setter uses simple assignment. Uses on attribute of scalar type like float,int.\cb15 \
\pard\pardeftab720
\cf13 \cb14 16.What is meaning of "atomic" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 "atomic", the synthesized setter/getter will ensure that a whole value is always returned from the getter or set by the setter, only single thread can access variable to get or set value at a time\cb15 \
\pard\pardeftab720
\cf13 \cb14 17.What is meaning of "nonatomic" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 In non atomic no such guaranty that value is returned from variable is same that setter sets. at same time\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
18.What is difference between "assign" and "retain" keyword?\cb15 \
\cb14 \
Retain -\cf16 Specifies that retain should be invoked on the object upon assignment. takes ownership of an object\cb15 \
\cf13 \cb14 Assign - \cf16 Specifies that the setter uses simple assignment. Uses on attribute of scalar type like float,int.\cb15 \
\cf13 \cb14 \
19.What is meaning of "synthesize" keyword ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 ask the compiler to generate the setter and getter\'a0 methods according to the specification in the declaration\cb15 \
\pard\pardeftab720
\cf13 \cb14 20.What is "Protocol" on objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 A protocol declares methods that can be implemented by any class. Protocols are not classes themselves. They simply define an interface that other objects are responsible for implementing.\'a0Protocols have many advantages. The idea is to provide a way for classes to share the same method and property declarations without inheriting them from a common ancestor\cb15 \
\pard\pardeftab720
\cf13 \cb14 21.What is use of UIApplication class?\cb15 \
\pard\pardeftab720
\cf16 \cb14 The \cf7 UIApplication \cf16 class implements the required behavior of an application.\'a0\cb15 \
\pard\pardeftab720
\cf13 \cb14 22.What compilers apple using ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 The Apple compilers are based on the compilers of the GNU Compiler Collection.\cb15 \
\pard\pardeftab720
\cf13 \cb14 23.What is synchronized() block in objective c? what is the use of that?\cb15 \
\pard\pardeftab720
\cf16 \cb14 The @synchronized()directive locks a section of code for use by a single thread. Other threads are blocked until the thread exits the protected code.\cb15 \
\pard\pardeftab720
\cf13 \cb14 24. What is the "interface" and "implementation"?\cb15 \
\pard\pardeftab720
\cf16 \cb14 interface declares the behavior of class and implementation defines the behavior of class.\cf13 \'a0\cf16 \cb15 \
\pard\pardeftab720
\cf13 \cb14 \
25.What is "private", "Protected" and "Public" ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 private - limits the scope class variable to the class that declares it.\cb15 \
\cb14 protected - Limits instance variable scope to declaring and inheriting classes.\cb15 \
\cb14 public - Removes restrictions on the scope of instance variables\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
26. What is the use of "dynamic" keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Instructs the compiler not to generate a warning if it cannot find implementations of accessor methods associated with the properties whose names follow.\cb15 \
\pard\pardeftab720
\cf13 \cb14 27.What is "Delegate" ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 A delegate is an object that will respond to pre-chosen selectors (function calls) at some point in the future., need to implement the protocol method by the delegate object.\cb15 \
\pard\pardeftab720
\cf13 \cb14 28.What is "notification"?\cb15 \
\pard\pardeftab720
\cf16 \cb14 provides a mechanism for broadcasting information within a program, using notification we can send message to other object by adding observer .\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
29.What is difference between "protocol" and "delegate"?\cb15 \
\pard\pardeftab720
\cf16 \cb14 protocol is used the declare a set of methods that a class that "adopts" (declares that it will use this protocol) will implement.\'a0\cb15 \
\cb14 Delegates are a use of the language feature of protocols. The \cf18 delegation design pattern\cf16  is a way of designing your code to use protocols where necessary.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
30.What is "Push Notification"?\cb15 \
\pard\pardeftab720
\cf16 \cb14 to get the any update /alert from server .\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
31.How to deal with SQLite database?\cb15 \
\pard\pardeftab720
\cf19 \cb14 Dealing with sqlite database in iOS:\cb15 \
\cb14 1. Create database : \cf7 sqlite3 AnimalDatabase.sql\cb15 \
\pard\pardeftab720
\cf7 \cb14 2.Create table and insert data in to\'a0 table :\cb15 \
\cb14 CREATE TABLE animals ( id INTEGER PRIMARY KEY, name VARCHAR(50), description TEXT, image VARCHAR(255) );\cb15 \
\cb14 \
INSERT INTO animals (name, description, image) VALUES ('Elephant', 'The elephant is a very large animal that lives in Africa and Asia', 'http://dblog.com.au/wp-content/elephant.jpg');\cb15 \
\pard\pardeftab720
\cf19 \cb14 \
3. Create new app --> Add SQLite framework and database file to project\cb15 \
\cb14 4. Read the database and close it once work done with database :\cb15 \
\pard\pardeftab720
\cf7 \cb14 // Setup the database object\cb15 \
\cb14  sqlite3 *database;\cb15 \
\cb14 \
 // Init the animals Array\cb15 \
\cb14  animals = [[NSMutableArray alloc] init];\cb15 \
\cb14 \
 // Open the database from the users filessytem\cb15 \
\cb14  if(sqlite3_open([databasePath UTF8String], &database) == SQLITE_OK) \{\cb15 \
\cb14   // Setup the SQL Statement and compile it for faster access\cb15 \
\cb14   const char *sqlStatement = "select * from animals";\cb15 \
\cb14   sqlite3_stmt *compiledStatement;\cb15 \
\cb14   if(sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) \{\cb15 \
\cb14    // Loop through the results and add them to the feeds array\cb15 \
\cb14    while(sqlite3_step(compiledStatement) == SQLITE_ROW) \{\cb15 \
\cb14     // Read the data from the result row\cb15 \
\cb14     NSString *aName = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, 1)];\cb15 \
\cb14     NSString *aDescription = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, 2)];\cb15 \
\cb14     NSString *aImageUrl = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, 3)];\cb15 \
\cb14 \
    // Create a new animal object with the data from the database\cb15 \
\cb14     Animal *animal = [[Animal alloc] initWithName:aName description:aDescription url:aImageUrl];\cb15 \
\cb14 \
    // Add the animal object to the animals Array\cb15 \
\cb14     [animals addObject:animal];\cb15 \
\cb14 \
    [animal release];\cb15 \
\cb14    \}\cb15 \
\cb14   \}\cb15 \
\cb14   // Release the compiled statement from memory\cb15 \
\cb14   sqlite3_finalize(compiledStatement);\cb15 \
\cb14 \
 \}\cb15 \
\cb14  sqlite3_close(database);\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
\
32.What is storyboard?\'a0\cb15 \
\pard\pardeftab720
\cf19 \cb14 With Storyboards, all screens are stored in a single file. This gives you a conceptual overview of the visual representation for the app and shows you how the screens are connected. Xcode provides a built-in editor to layout the Storyboards.\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls16\ilvl0\cf16 \cb14 {\listtext	1.	}.storyboard is essentially one single file for all your screens in the app and it shows the flow of the screens. You can add segues/transitions between screens, this way. So, this minimizes the boilerplate\'a0 code required to manage multiple screens.\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa260
\ls16\ilvl0\cf16 \cb14 {\listtext	2.	}\'a0 2. \'a0 Minimizes the overall no. of files in an app.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
33.What is Category in Objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 A category allows you to add methods to an existing class\'97even to one for which you do not have the source.\cb15 \
\pard\pardeftab720
\cf13 \cb14 34.What is block in objective c?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Blocks are a language-level feature added to C, Objective-C and C++, which allow you to create distinct segments of code that can be passed around to methods or functions as if they were values. Blocks are Objective-C objects, which means they can be added to collections like \cf7 NSArray\cf16  or \cf7 NSDictionary\cf16 . They also have the ability to capture values from the enclosing scope, making them similar to closures or lambdas in other programming languages.\cb15 \
\pard\pardeftab720
\cf13 \cb14 35. How to parse xml? explain in deep.\cb15 \
\cb14 \
Using NSXMLParser. \'a0\cb15 \
\pard\pardeftab720
\cf16 \cb14 Create xml parser object with xml data, set its delegate , and call the parse method with parserObject.\cb15 \
\cb14 Delegate methods getting called :\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parserDidStartDocument:"}}{\fldrslt \cf20 \cb14 \'96\'a0parserDidStartDocument:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parserDidEndDocument:"}}{\fldrslt \cf20 \cb14 \'96\'a0parserDidEndDocument:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didStartElement:namespaceURI:qualifiedName:attributes:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didStartElement:namespaceURI:qualifiedName:attributes:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didEndElement:namespaceURI:qualifiedName:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didEndElement:namespaceURI:qualifiedName:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didStartMappingPrefix:toURI:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didStartMappingPrefix:toURI:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didEndMappingPrefix:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didEndMappingPrefix:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:resolveExternalEntityName:systemID:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:resolveExternalEntityName:systemID:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:parseErrorOccurred:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:parseErrorOccurred:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:validationErrorOccurred:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:validationErrorOccurred:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundCharacters:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundCharacters:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundIgnorableWhitespace:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundIgnorableWhitespace:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundProcessingInstructionWithTarget:data:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundProcessingInstructionWithTarget:data:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundComment:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundComment:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundCDATA:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundCDATA:}}\
\pard\pardeftab720
\cf13 \cb14 \
36.How to parse JSON? explain in deep.\cb15 \
\cb14 By using \cf16 NSJSONSerialization.\'a0\cb15 \
\pard\pardeftab720
\cf16 \cb14 For example : NSArray *jsonArray = [NSJSONSerialization JSONObjectWithData: data options: NSJSONReadingMutableContainers error: &e];\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
37.How to use reusable cell in UITableview?\cb15 \
\pard\pardeftab720
\cf16 \cb14 By using dequeReusableCellWithIdentifier\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
38.What is the meaning of "strong"keyword?\cb15 \
\pard\pardeftab720
\cf16 \cb14 *strong -o "own" the object you are referencing with this property/variable. The compiler will take care that any object that you assign to this property will not be destroyed as long as you (or any other object) points  to it with a strong reference.\cb15 \
\pard\pardeftab720
\cf13 \cb14 39.What is the meaning of "weak" keyword?\'a0\cb15 \
\pard\pardeftab720
\cf16 \cb14 *Weak - weak reference you signify that you don't want to have control over the object's lifetime. The object you are referencing weakly only lives on because at least one other object holds a strong reference to it. Once that is no longer the case, the object gets destroyed and your weak property will automatically get set to nil.\cb15 \
\pard\pardeftab720
\cf13 \cb14 40.What is difference strong and\'a0 weak reference ? explain.\cb15 \
\pard\pardeftab720
\cf16 \cb14 complier with be responsible for lifetime of object which is declared as strong. for weak object - compiler will destroy object once strong reference that hold weak object get destroyed.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
41.What is ARC ? How it works? explain in deep.\cb15 \
\pard\pardeftab720
\cf18 \cb14 \ul \ulc18 Automatic reference counting\cf16 \ulnone  (ARC)\'a0 If the compiler can recognize where you should be retaining and releasing objects, and put the retain and release statement in code.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
42. What manual memory management ?\'a0 how it work?\cb15 \
\pard\pardeftab720
\cf16 \cb14 In Manual memory management\'a0 developers is responsible for life cycle of object. developer has to retain /alloc and release the object wherever needed.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
43. How to find the memory leaks in MRC?\cb15 \
\pard\pardeftab720
\cf16 \cb14 By using -\'a0\cb15 \
\cb14 1. \'a0Static analyzer.\cb15 \
\cb14 2. Instrument\'a0\cb15 \
\pard\pardeftab720
\cf13 \cb14 44.what is use of NSOperation? how NSOperationque works?\cb15 \
\pard\pardeftab720
\cf0 \cb14 An operation object is a single-shot object\'97that is, it executes its task once and cannot be used to execute it again. You typically execute operations by adding them to an operation queue\cf22 An NSOperationQueue object is a queue that handles objects of the NSOperation class type. An NSOperation object, simply phrased, represents a single task, including both the data and the code related to the task.\'a0The NSOperationQueue handles and manages the execution of all the NSOperation objects (the tasks) that have been added to it.\cb15 \
\pard\pardeftab720
\cf13 \cb14 45.How to send crash report from device?\cb15 \
\cb14 \
46.What is autorealease pool?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Every time -autorelease is sent to an object, it is added to the inner-most autorelease pool. When the pool is drained, it simply sends -release to all the objects in the pool.\cb15 \
\cb14 Autorelease pools are simply a convenience that allows you to defer sending -release until "later". That "later" can happen in several places, but the most common in Cocoa GUI apps is at the end of the current run loop cycle.\cb15 \
\pard\pardeftab720
\cf13 \cb14 47.What happens when we invoke a method on a nil pointer?\cb15 \
\cb14 \
48.Difference between nil and Nil.\cb15 \
\pard\pardeftab720
\cf16 \cb14 Nil is meant for class pointers, and nil is meant for object pointers\cb15 \
\pard\pardeftab720
\cf13 \cb14 49.What is fast enumeration?\cb15 \
\pard\pardeftab720
\cf16 \cb14 for(id object in objets)\{\cb15 \
\cb14 \}\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
50. How to start a thread?\'a0\cb15 \
\pard\pardeftab720
\cf16 \cb14 - (void)performSelectorInBackground:(SEL)aSelector withObject:(id)arg on NSObject\cb15 \
\cb14 \'a0 \cf23 NSThread\cf16 * evtThread = [ [\cf23 NSThread\cf16  alloc] initWithTarget:self\cb15 \
\cb14 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 selector:\cf24 @selector\cf16 ( saySomething )\cb15 \
\cb14 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 object:nil ];\cb15 \
\cb14 \'a0 \'a0 [ evtThread start ];\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
51.How to download something from the internet?\cb15 \
\pard\pardeftab720
\cf16 \cb14 By Using NSURLConnection , by starting connection or sending synchronous request.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
52.what is synchronous web request and asynchronous ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 In\'a0 synchronous request main thread gets block and control will not get back to user till that request gets execute.\cb15 \
\cb14 In Asynchronous control gets back to user even if request is getting execute.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
53. Difference between sax parser and dom parser ?\cb15 \
\pard\pardeftab720
\cf19 \cb14 SAX (Simple API for XML)\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls17\ilvl0\cf19 \cb14 {\listtext	1.	}Parses node by node\cb15 \
\ls17\ilvl0\cb14 {\listtext	2.	}Doesn't store the XML in memory\cb15 \
\ls17\ilvl0\cb14 {\listtext	3.	}We can not insert or delete a node\cb15 \
\ls17\ilvl0\cb14 {\listtext	4.	}Top to bottom traversing\cb15 \
\pard\pardeftab720
\cf19 \cb14 \
DOM (Document Object Model)\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls18\ilvl0\cf19 \cb14 {\listtext	1.	}Stores the entire XML document into memory before processing\cb15 \
\ls18\ilvl0\cb14 {\listtext	2.	}Occupies more memory\cb15 \
\ls18\ilvl0\cb14 {\listtext	3.	}We can insert or delete nodes\cb15 \
\ls18\ilvl0\cb14 {\listtext	4.	}Traverse in any direction\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
54.Explain stack and heap?\cb15 \
\cb14 \
\
55.What are the ViewController \'a0lifecycle in ios?\cb15 \
\pard\pardeftab720
\cf16 \cb14 loadView - viewDidLoad-viewWillAppear-viewDidAppear - viewDisappear\'a0 - viewDidUnload\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
56.Difference between coredata & sqlite?\cb15 \
\cb14 \
\pard\pardeftab720
\cf16 There is a huge difference between these two. SQLLite is a database itself like we have MS SQL Server. But CoreData is an ORM (Object Relational Model) which creates a layer between the database and the UI. It speeds-up the process of interaction as we dont have to write queries, just work with the ORM and let ORM handles the backend. For save or retrieval of large data, I recommend to use Core Data because of its abilities to handle the less processing speed of IPhone.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
\
57.Steps for using coredata?\cb15 \
\pard\pardeftab720
\cf25 \cb14 NSFetchedResultsController - \cf26 It is designed primarily to function as a data source for a\cf25 UITableView\cf26 \cb15 \
\pard\pardeftab720
\cf13 \cb14 \
58.Procedure to push the app in AppStore?\cb15 \
\cb14 \
59.What are the Application lifecycle in ios?\cb15 \
\pard\pardeftab720
\cf16 \cb14 ApplicationDidFinishLaunchingWithOption -ApplicationWillResignActive- ApplicationDidBecomeActive-ApplicationWillTerminate\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
\
60.Difference between release and autorelease ?\cb15 \
\pard\pardeftab720
\cf16 \cb14 release - destroy the object from memory,\cb15 \
\cb14 autorelease - destroy the object from memory in future when it is not in use.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
61.How to start a selector on a background thread\cb15 \
\pard\pardeftab720
\cf16 \cb14 - (void)performSelectorInBackground:(SEL)aSelector withObject:(id)arg on NSObject\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
62.\cf27 What\cf13  happens if the methods doesn\'92t exist\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 App will crash with exception unrecognized selector sent to instance.\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
63. How Push notification works?\cb15 \
\pard\pardeftab720
\cf16 \cb14 Server - Apple server - device by using APNs\cb15 \
\pard\pardeftab720
\cf13 \cb14 \
Delegate methods :\'a0\cb15 \
\cb14 UITableView:\cb15 \
\pard\pardeftab720
\cf16 \cb14 DataSource -\cb15 \
\cb14 Configuring a Table View\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:cellForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:cellForRowAtIndexPath:}}\cf28 \cb14 \'a0\'a0required method\cf21 \cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/numberOfSectionsInTableView:"}}{\fldrslt \cf20 \cb14 \'96\'a0numberOfSectionsInTableView:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:numberOfRowsInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:numberOfRowsInSection:}}\cf28 \cb14 \'a0\'a0required method\cf21 \cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/sectionIndexTitlesForTableView:"}}{\fldrslt \cf20 \cb14 \'96\'a0sectionIndexTitlesForTableView:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:sectionForSectionIndexTitle:atIndex:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:sectionForSectionIndexTitle:atIndex:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:titleForHeaderInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:titleForHeaderInSection:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:titleForFooterInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:titleForFooterInSection:}}\
\pard\pardeftab720
\cf16 \cb14 Inserting or Deleting Table Rows\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:commitEditingStyle:forRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:commitEditingStyle:forRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:canEditRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:canEditRowAtIndexPath:}}\
\pard\pardeftab720
\cf16 \cb14 Reordering Table Rows\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:canMoveRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:canMoveRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDataSource/tableView:moveRowAtIndexPath:toIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:moveRowAtIndexPath:toIndexPath:}}\
\pard\pardeftab720
\cf16 \cb14 \
\'a0\'a0Delegate -\cb15 \
\cb14 Configuring Rows for the Table View\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:heightForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:heightForRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:indentationLevelForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:indentationLevelForRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:willDisplayCell:forRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:willDisplayCell:forRowAtIndexPath:}}\
\pard\pardeftab720
\cf16 \cb14 Managing Accessory Views\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:accessoryButtonTappedForRowWithIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:accessoryButtonTappedForRowWithIndexPath:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Managing Selections\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:willSelectRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:willSelectRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:didSelectRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:didSelectRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:willDeselectRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:willDeselectRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:didDeselectRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:didDeselectRowAtIndexPath:}}\
\pard\pardeftab720
\cf16 \cb14 Modifying the Header and Footer of Sections\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:viewForHeaderInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:viewForHeaderInSection:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:viewForFooterInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:viewForFooterInSection:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:heightForHeaderInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:heightForHeaderInSection:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:heightForFooterInSection:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:heightForFooterInSection:}}\
\pard\pardeftab720
\cf16 \cb14 Editing Table Rows\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:willBeginEditingRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:willBeginEditingRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:didEndEditingRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:didEndEditingRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:editingStyleForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:editingStyleForRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:shouldIndentWhileEditingRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:shouldIndentWhileEditingRowAtIndexPath:}}\
\pard\pardeftab720
\cf16 \cb14 Reordering Table Rows\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Copying and Pasting Row Content\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:shouldShowMenuForRowAtIndexPath:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:shouldShowMenuForRowAtIndexPath:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:canPerformAction:forRowAtIndexPath:withSender:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:canPerformAction:forRowAtIndexPath:withSender:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:performAction:forRowAtIndexPath:withSender:"}}{\fldrslt \cf20 \cb14 \'96\'a0tableView:performAction:forRowAtIndexPath:withSender:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf27 \'a0UIPickerView-\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 \'a0DataSource -\cb15 \
\cb14 Providing Counts for the Picker View\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/iPhone/Reference/UIPickerViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UIPickerViewDataSource/numberOfComponentsInPickerView:"}}{\fldrslt \cf20 \cb14 \'96\'a0numberOfComponentsInPickerView:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/iPhone/Reference/UIPickerViewDataSource_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UIPickerViewDataSource/pickerView:numberOfRowsInComponent:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:numberOfRowsInComponent:}}\
\pard\pardeftab720
\cf16 \cb14 \'a0\'a0Delegate -\cb15 \
\cb14 Setting the Dimensions of the Picker View\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:rowHeightForComponent:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:rowHeightForComponent:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:widthForComponent:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:widthForComponent:}}\
\pard\pardeftab720
\cf16 \cb14 Setting the Content of Component Rows\cb15 \
\cb14 The methods in this group are marked \cf29 @optional\cf16 . However, to use a picker view, you must implement either the{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:titleForRow:forComponent:"}}{\fldrslt \cf21 pickerView:titleForRow:forComponent:}} or the{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:viewForRow:forComponent:reusingView:"}}{\fldrslt \cf21 pickerView:viewForRow:forComponent:reusingView:}} method to provide the content of component rows.\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:titleForRow:forComponent:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:titleForRow:forComponent:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:viewForRow:forComponent:reusingView:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:viewForRow:forComponent:reusingView:}}\
\pard\pardeftab720
\cf16 \cb14 Responding to Row Selection\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/Reference/UIPickerViewDelegate.html#//apple_ref/occ/intfm/UIPickerViewDelegate/pickerView:didSelectRow:inComponent:"}}{\fldrslt \cf20 \cb14 \'96\'a0pickerView:didSelectRow:inComponent:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf27 UITextFeild-\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 Delegate -\cb15 \
\cb14 Managing Editing\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldShouldBeginEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldShouldBeginEditing:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldDidBeginEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldDidBeginEditing:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldShouldEndEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldShouldEndEditing:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldDidEndEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldDidEndEditing:}}\
\pard\pardeftab720
\cf16 \cb14 Editing the Text Field\'92s Text\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textField:shouldChangeCharactersInRange:replacementString:"}}{\fldrslt \cf20 \cb14 \'96\'a0textField:shouldChangeCharactersInRange:replacementString:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldShouldClear:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldShouldClear:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/UITextFieldDelegate/UITextFieldDelegate.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldShouldReturn:"}}{\fldrslt \cf20 \cb14 \'96\'a0textFieldShouldReturn:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf0 \'a0\cf27 UItextView-\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 \'a0Delegate - Responding to Editing Notifications\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewShouldBeginEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewShouldBeginEditing:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewDidBeginEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewDidBeginEditing:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewShouldEndEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewShouldEndEditing:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewDidEndEditing:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewDidEndEditing:}}\
\pard\pardeftab720
\cf16 \cb14 Responding to Text Changes\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textView:shouldChangeTextInRange:replacementText:"}}{\fldrslt \cf20 \cb14 \'96\'a0textView:shouldChangeTextInRange:replacementText:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewDidChange:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewDidChange:}}\
\pard\pardeftab720
\cf16 \cb14 Responding to Selection Changes\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/Reference/UITextViewDelegate.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewDidChangeSelection:"}}{\fldrslt \cf20 \cb14 \'96\'a0textViewDidChangeSelection:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf27 \'a0MKMapView-\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 Delegate -\cb15 \
\cb14 Responding to Map Position Changes\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:regionWillChangeAnimated:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:regionWillChangeAnimated:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:regionDidChangeAnimated:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:regionDidChangeAnimated:}}\
\pard\pardeftab720
\cf16 \cb14 Loading the Map Data\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapViewWillStartLoadingMap:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapViewWillStartLoadingMap:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapViewDidFinishLoadingMap:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapViewDidFinishLoadingMap:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapViewDidFailLoadingMap:withError:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapViewDidFailLoadingMap:withError:}}\
\pard\pardeftab720
\cf16 \cb14 Tracking the User Location\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapViewWillStartLocatingUser:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapViewWillStartLocatingUser:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapViewDidStopLocatingUser:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapViewDidStopLocatingUser:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didUpdateUserLocation:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didUpdateUserLocation:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didFailToLocateUserWithError:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didFailToLocateUserWithError:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didChangeUserTrackingMode:animated:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didChangeUserTrackingMode:animated:}}\cf28 \cb14 \'a0\'a0required method\cf21 \cb15 \
\pard\pardeftab720
\cf16 \cb14 Managing Annotation Views\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:viewForAnnotation:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:viewForAnnotation:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didAddAnnotationViews:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didAddAnnotationViews:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:annotationView:calloutAccessoryControlTapped:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:annotationView:calloutAccessoryControlTapped:}}\
\pard\pardeftab720
\cf16 \cb14 Dragging an Annotation View\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:annotationView:didChangeDragState:fromOldState:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:annotationView:didChangeDragState:fromOldState:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Selecting Annotation Views\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didSelectAnnotationView:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didSelectAnnotationView:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didDeselectAnnotationView:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didDeselectAnnotationView:}}\
\pard\pardeftab720
\cf16 \cb14 Managing Overlay Views\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:viewForOverlay:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:viewForOverlay:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/MKMapViewDelegate/MKMapViewDelegate.html#//apple_ref/occ/intfm/MKMapViewDelegate/mapView:didAddOverlayViews:"}}{\fldrslt \cf20 \cb14 \'96\'a0mapView:didAddOverlayViews:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf27 NSURLConnection\cf30 -\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 Delegate -\cb15 \
\cb14 Connection Authentication\cb15 \
\cb14 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:willSendRequestForAuthenticationChallenge:"}}{\fldrslt \cf20 \'96\'a0connection:willSendRequestForAuthenticationChallenge:}}\cf21 \cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:canAuthenticateAgainstProtectionSpace:"}}{\fldrslt \cf20 \cb14 \'96\'a0connection:canAuthenticateAgainstProtectionSpace:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:didCancelAuthenticationChallenge:"}}{\fldrslt \cf20 \cb14 \'96\'a0connection:didCancelAuthenticationChallenge:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:didReceiveAuthenticationChallenge:"}}{\fldrslt \cf20 \cb14 \'96\'a0connection:didReceiveAuthenticationChallenge:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connectionShouldUseCredentialStorage:"}}{\fldrslt \cf20 \cb14 \'96\'a0connectionShouldUseCredentialStorage:}}\
\pard\pardeftab720
\cf16 \cb14 Connection Completion\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:didFailWithError:"}}{\fldrslt \cf20 \cb14 \'96\'a0connection:didFailWithError:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 \
NSURLConnectionDownloadDelegate\cb15 \
\pard\pardeftab720
\cf0 \cb14     \'a0 {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDownloadDelegate_Protocol/NSURLConnectionDownloadDelegate/NSURLConnectionDownloadDelegate.html#//apple_ref/occ/intfm/NSURLConnectionDownloadDelegate/connection:didWriteData:totalBytesWritten:expectedTotalBytes:"}}{\fldrslt \cf20 \'96\'a0connection:didWriteData:totalBytesWritten:expectedTotalBytes:}}\cf21 \cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDownloadDelegate_Protocol/NSURLConnectionDownloadDelegate/NSURLConnectionDownloadDelegate.html#//apple_ref/occ/intfm/NSURLConnectionDownloadDelegate/connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:"}}{\fldrslt \cf20 \cb14 \'96\'a0connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDownloadDelegate_Protocol/NSURLConnectionDownloadDelegate/NSURLConnectionDownloadDelegate.html#//apple_ref/occ/intfm/NSURLConnectionDownloadDelegate/connectionDidFinishDownloading:destinationURL:"}}{\fldrslt \cf20 \cb14 \'96\'a0connectionDidFinishDownloading:destinationURL:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf0 \'a0\cf27 NSURLConnection\cf16 \cb15 \
\pard\pardeftab720
\cf16 \cb14 Preflighting a Request\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/clm/NSURLConnection/canHandleRequest:"}}{\fldrslt \cf20 \cb14 +\'a0canHandleRequest:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Loading Data Synchronously\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/clm/NSURLConnection/sendSynchronousRequest:returningResponse:error:"}}{\fldrslt \cf20 \cb14 +\'a0sendSynchronousRequest:returningResponse:error:}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Loading Data Asynchronously\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/clm/NSURLConnection/connectionWithRequest:delegate:"}}{\fldrslt \cf20 \cb14 +\'a0connectionWithRequest:delegate:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/initWithRequest:delegate:"}}{\fldrslt \cf20 \cb14 \'96\'a0initWithRequest:delegate:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/initWithRequest:delegate:startImmediately:"}}{\fldrslt \cf20 \cb14 \'96\'a0initWithRequest:delegate:startImmediately:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/clm/NSURLConnection/sendAsynchronousRequest:queue:completionHandler:"}}{\fldrslt \cf20 \cb14 +\'a0sendAsynchronousRequest:queue:completionHandler:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/start"}}{\fldrslt \cf20 \cb14 \'96\'a0start}}\
\pard\pardeftab720
\cf16 \cb14 Stopping a Connection\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/cancel"}}{\fldrslt \cf20 \cb14 \'96\'a0cancel}}\cf21 \
\pard\pardeftab720
\cf16 \cb14 Scheduling Delegate Messages\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/scheduleInRunLoop:forMode:"}}{\fldrslt \cf20 \cb14 \'96\'a0scheduleInRunLoop:forMode:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/setDelegateQueue:"}}{\fldrslt \cf20 \cb14 \'96\'a0setDelegateQueue:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/instm/NSURLConnection/unscheduleFromRunLoop:forMode:"}}{\fldrslt \cf20 \cb14 \'96\'a0unscheduleFromRunLoop:forMode:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf0 \'a0\cf30 NSXMLParser-\cb15 \
\pard\pardeftab720
\cf16 \cb14 Handling XML\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parserDidStartDocument:"}}{\fldrslt \cf20 \cb14 \'96\'a0parserDidStartDocument:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parserDidEndDocument:"}}{\fldrslt \cf20 \cb14 \'96\'a0parserDidEndDocument:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didStartElement:namespaceURI:qualifiedName:attributes:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didStartElement:namespaceURI:qualifiedName:attributes:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didEndElement:namespaceURI:qualifiedName:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didEndElement:namespaceURI:qualifiedName:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didStartMappingPrefix:toURI:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didStartMappingPrefix:toURI:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:didEndMappingPrefix:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:didEndMappingPrefix:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:resolveExternalEntityName:systemID:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:resolveExternalEntityName:systemID:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:parseErrorOccurred:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:parseErrorOccurred:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:validationErrorOccurred:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:validationErrorOccurred:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundCharacters:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundCharacters:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundIgnorableWhitespace:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundIgnorableWhitespace:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundProcessingInstructionWithTarget:data:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundProcessingInstructionWithTarget:data:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundComment:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundComment:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundCDATA:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundCDATA:}}\
\pard\pardeftab720
\cf16 \cb14 Handling the DTD\cb15 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:}}\cf21 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundElementDeclarationWithName:model:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundElementDeclarationWithName:model:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundExternalEntityDeclarationWithName:publicID:systemID:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundExternalEntityDeclarationWithName:publicID:systemID:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundInternalEntityDeclarationWithName:value:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundInternalEntityDeclarationWithName:value:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSXMLParserDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSXMLParserDelegate/parser:foundNotationDeclarationWithName:publicID:systemID:"}}{\fldrslt \cf20 \cb14 \'96\'a0parser:foundNotationDeclarationWithName:publicID:systemID:}}\
\pard\pardeftab720
\cf16 \cb14 \
\pard\pardeftab720
\cf13 \
7.NSURLConnection\cb15 \
\pard\pardeftab720
\cf16 \cb14 Connection Authentication\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls19\ilvl0\cf31 \cb14 		\'96\'a0connection:willSendRequestForAuthenticationChallenge:\cb15 \
\ls19\ilvl0\cb14 		\'96\'a0connection:canAuthenticateAgainstProtectionSpace:\cb15 \
\ls19\ilvl0\cb14 		\'96\'a0connection:didCancelAuthenticationChallenge:\cb15 \
\ls19\ilvl0\cb14 		\'96\'a0connection:didReceiveAuthenticationChallenge:\cb15 \
\ls19\ilvl0\cb14 		\'96\'a0connectionShouldUseCredentialStorage:\cb15 \
\pard\pardeftab720
\cf16 \cb14 Connection Completion\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls20\ilvl0\cf31 \cb14 		\'96\'a0connection:didFailWithError:\cb15 \
\pard\pardeftab720
\cf16 \cb14 MethodGroup\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls21\ilvl0\cf31 \cb14 		\'96\'a0connection:needNewBodyStream\cb15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/intfm/NSURLConnectionDelegate/connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:"}}{\fldrslt \'96\'a0connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:}}\cf32 \'a0\'a0required method\cf31 \cb15 \
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/NSObject/connection:didReceiveData:"}}{\fldrslt \'96\'a0connection:didReceiveData:}}\cf32 \'a0\'a0required method\cf0 \'a0\cf33 \cb15 \
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/NSObject/connection:didReceiveResponse:"}}{\fldrslt \'96\'a0connection:didReceiveResponse:}}\cf32 \'a0\'a0required method\cf0 \'a0\cf33 \cb15 \
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/NSObject/connection:willCacheResponse:"}}{\fldrslt \'96\'a0connection:willCacheResponse:}}\cf32 \'a0\'a0required method\cf33 \cb15 \
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/NSObject/connection:willSendRequest:redirectResponse:"}}{\fldrslt \'96\'a0connection:willSendRequest:redirectResponse:}}\cf32 \'a0\'a0required method\cf0 \'a0\cf31 \cb15 \
\ls21\ilvl0\cf20 \cb14 		{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/DeprecationAppendix/AppendixADeprecatedAPI.html#//apple_ref/occ/instm/NSObject/connectionDidFinishLoading:"}}{\fldrslt \'96\'a0connectionDidFinishLoading:}}\cf32 \'a0\'a0required method\cf0 \'a0\cf33 \cb15 \
\pard\pardeftab720\sl360

\f2\i\fs26 \cf6 \cb3 \
\pard\pardeftab720\sl520\sa520

\f0\i0\fs32 \cf2 \
\
\pard\pardeftab720\sl400

\f7\fs28 \cf34 1)what happens if you remove the object from the array, and you try to use it?\cf35 \
\cf34 \
\pard\pardeftab720\sl400
\cf36 \'a0 our application crashes\cf35 \
\
\
\pard\pardeftab720\sl400
\cf34 2)Difference between HTML & XML?\cf35 \
\cf34 \
\pard\pardeftab720\sl400
\cf0 XML was designed to transfer and store the data\cf35 \
\cf0 XML was to carry data not to display the data\cf35 \
\cf0 XML is designed to be self description\cf35 \
\cf0 HTML was designed to Display the data\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf34 3)What are iPhone SDK Tools?\cf35 \
\pard\pardeftab720\sl400
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf0 iPhone SDK tools:\cf35 \
\cf0 Xcode\cf35 \
\cf0 Interface Builder\cf35 \
\cf0 iphone/iPad Simmulater\cf35 \
\cf0 Instrument\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 4)\cf34 what are the Delegate Methods for XML Parsing?\cf35 \
\
\
\pard\pardeftab720\sl400
\cf0 There are mainly 3 Types of Delegate methods for XML Parsing\cf35 \
\cf0 i. did start element\cf35 \
\cf0 ii. did end element\cf35 \
\cf0 iii. found characters\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf34 5)What is XML parsing?\cf35 \
\pard\pardeftab720\sl400
\cf0 \
XML parsing is the transfer of data from xml page to our application\cf35 \
\cf0 the data which is in term of elements.\cf35 \
\
\
\pard\pardeftab720\sl400
\cf34 6)Difference Between nil & NiL?\cf35 \
\pard\pardeftab720\sl400
\cf0 \'a0 both nil, Nil return a NULL pointer (Zero pointer)\cf35 \
\cf0 but\cf35 \
\pard\pardeftab720\sl400

\i \cf0 nil
\i0 \'a0is specific to objects (e.g.,\'a0
\i id
\i0 )\cf35 \
\pard\pardeftab720\sl400
\cf0 and\'a0
\i Nil
\i0 \'a0is specific to class pointers.\cf35 \
X [for the NULL pointers in Objective c We have to use :nil,\
\'a0in the same way\'a0for the NULL pointers in C,C++ We have to use :NiL\
\cf0 NiL is just like NULL]\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf34 7)what happens when we invoke a method on a nil pointer?\cf35 \
\
\pard\pardeftab720\sl400
\cf0 It returns 0, nil, a structure filled with 0s\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf34 8)what Enum?\cf35 \
\pard\pardeftab720\sl400
\cf0 \
It is a user defined data type.it improves speed of execution.\cf35 \
\cf0 By default it assigns range from 0,1\'85\'85\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf34 9)Forward\'a0declarations:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 @class,@protocols\'a0these are forward declarations to avoid cyclic dependencies.\cf35 \
\
\cf0 @class:\cf35 \
\cf0 this directive to make a forward reference to another class and improve the .h file.\cf35 \
\
\cf0 @protocols:\cf35 \
\cf0 these are two types. 1)Formal protocol 2)Informal protocol\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Formal\'a0protocol:\cf35 \
\pard\pardeftab720\sl400
\cf0 It is a set of methods that must be implemented in any conformic class.\cf35 \
\
\pard\pardeftab720\sl400
\cf37 Informal\'a0protocol\cf35 :\
\pard\pardeftab720\sl400
\cf0 In informal protocol developer group methods by app fields.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 10)Category:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 A category is a way of adding new methods to the all instances of existing class with out modifying the class.The use of category is extending the NSString class to add functionality.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 11)Property:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 By using property what ever the data are stored in array,string,\'85 that values are used in any where in that program.Property contains the data and synthesize retrieve the data.\cf35 \
\
\pard\pardeftab720\sl340
\cf34 which data structure has been used in\'a0iPhone\'a0to store contacts ?\cf35 \
NSHashTable\
\pard\pardeftab720\sl340
\cf16 \
\pard\pardeftab720\sl400
\cf34 what are the property declarations/attributes?\cf35 \
\pard\pardeftab720\sl400
\cf36 atomic,\cf35 \
\pard\pardeftab720\sl400
\cf0 nonatomic,\cf35 \
\cf0 readonly,\cf35 \
\cf0 retain,\cf35 \
\cf0 copy.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What are the types of accessory methods?\cf35 \
\pard\pardeftab720\sl400
\cf0 we have 2 types of\'a0accessory\'a0 methods:\cf35 \
\
i.\'a0\cf34 Getter method:\cf35 \
\cf0 Getter method is an accessor method that retrieves the value of an instance variable.\cf35 \
\
ii.\cf37 Setter method:\cf35 \
\cf0 Setter method is an accessor method that Sets the value of an instance variable.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 what is a Selector?\cf35 \
\pard\pardeftab720\sl400
\cf0 Selector can either be a name of method Or message to an object.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What is Delegate?\cf35 \
\pard\pardeftab720\sl400
\cf0 it is an object that usually read to some events in another object\cf35 \
\cf0 A\'a0Delegate\'a0allows one object to send messages to another object when an Event happens.\cf35 \
\cf0 An object directly to carryout an action by another object.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What is an App Delegate..?\cf35 \
\pard\pardeftab720\sl400
\cf0 it is necessary in any app.\cf35 \
\cf0 it is a controller which takes care critical events\cf35 \
while\cf0 \'a0Starting Running and Editing applications\cf35 \
\
\pard\pardeftab720\sl400
\cf34 iPhone Paths:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 iPhone contains two paths.\cf35 \
\cf0 1.Resource path:\cf35 \
\cf0 By using this path we can retrieve the data from resource path.But we can not add the data.\cf35 \
\cf0 2.Modify path\cf35 \
\
\cf0 By using this path we can add,modify,delete,retrieve the data.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Accelerometer:\cf35 \
\pard\pardeftab720\sl400
\cf0 The accelerometer allows the device to detect the orientation of the device and adapts the content to suit the new orientation.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Header file:\cf35 \
\pard\pardeftab720\sl400
\cf0 header files are preprocessor directories.\cf35 \
\cf0 in Obj c By using #include,#import we can import the header files.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Diff between self and super:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 Self:\cf35 \
\cf0 self is a variable that refers to the object of present class.\cf35 \
\cf0 Super:\cf35 \
\cf0 Super referes to the same variable.\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf34 Resources:\cf35 \
\pard\pardeftab720\sl400
\cf0 In resources we can add the outside contents like images,videos,audio files.\cf35 \
\cf0 It contains info.plist file.plist file having entire project information.\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf34 Products:\cf35 \
The final output present in product folder and extension is .app\
\pard\pardeftab720\sl400
\cf0 Intiallu .app is in red color.once if you can build the app then the .app is created.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Files owner window:\cf35 \
\
\pard\pardeftab720\sl400
\cf0 It contains copy of nib files.\cf35 \
\cf0 It is always 1st icon in any .nib file.\cf35 \
\cf0 \
\pard\pardeftab720\sl400
\cf35 \
\pard\pardeftab720\sl400
\cf34 what compiler we have used in Objective c?\cf35 \
\
\pard\pardeftab720\sl400
\cf0 Compiler for objective c GCC version 4.0\cf35 \
\
\pard\pardeftab720\sl400
\cf34 SDK:\cf35 \
\pard\pardeftab720\sl400
\cf0 SDK means software development kit. It contains Xcode IDE,instruments, iPhone simulator,Interface Builder,Frameworks\'85\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What is Xcode?\cf35 \
\pard\pardeftab720\sl400
\cf0 Xcode is an Intigrated Development Environment IDE\cf35 \
\cf0 it acts like an Editor of Objective c loang\cf35 \
\cf0 We can write,run,build our code in xcode\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What is the simulator?\cf35 \
\pard\pardeftab720\sl400
\cf0 it is a demo to check our applications if we didn,t have the original device\cf35 \
\
\pard\pardeftab720\sl400
\cf34 what are Instruments?\cf35 \
\pard\pardeftab720\sl400
\cf0 The instrument enables you to dynamically trace and profile the performance of the Macos,iPhone, iPad applications.\cf35 \
\cf0 Bu using Instruments we can test the performance of the application.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 what is Interface Builder?\cf35 \
\pard\pardeftab720\sl400
\cf0 Interface builder is developed in 1988.It is a visual tool that allows you to design your interfaces for iphone.By using interface builder we can drag and drop the views on interface.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Explain about Inspector\cf35 \
\pard\pardeftab720\sl400
\cf0 It is mainly used for setting the properties of view elements. It contains four sections.\cf35 \
\cf0 1)Attribute inspector\cf35 \
\cf0 2)Connection\cf35 \
\cf0 3)Size of inspector\cf35 \
\cf0 4)Identity\cf35 \
\
\pard\pardeftab720\sl400
\cf34 Groups and File sections:\cf35 \
\pard\pardeftab720\sl400
\cf0 Classes:\cf35 \
\cf0 In class folder actual coding will be their.\cf35 \
\cf0 for window based application we have two files.\cf35 \
\cf0 1)appdelegate.h\cf35 \
\cf0 2)appdelegate.m\cf35 \
\cf0 For view based applications we have four files.\cf35 \
\cf0 1)appdelegate.h\cf35 \
\cf0 2)appdelegate.m\cf35 \
\cf0 3)viewcontrol.h\cf35 \
\cf0 4)viewcontrol.m\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What are different Layers of iOS\cf35 \
\pard\pardeftab720\sl400
\cf0 Cocoa Touch Layer\cf35 \
\cf0 Media Layer\cf35 \
\cf0 Core Services Layer\cf35 \
\cf0 Core Services Layer\cf35 \
\cf0 what is optimization?\cf35 \
Optimization\cf0 \'a0is nothing but\cf35 \
\cf0 Making our application more attractively even after\'a0compilation\'a0of the coding\cf35 \
\
\pard\pardeftab720\sl400
\cf34 What\'a0happened\'a0if array release?\cf35 \
\pard\pardeftab720\sl400
\cf0 As such, when the NSArray is released your object will still have a retain count of one and will therefore still be around after the autorelease pool is emptied. (Until of course you release it.\cf35 \
\
\pard\pardeftab720\sl400
\cf34 How can we use multiple class inheritance in objective c?\cf35 \
\pard\pardeftab720\sl400
\cf0 \
In Objective c Multiple inheritance is not supported\cf35 \
\cf0 for this purpose we use "categories" in Objective c\cf35 \
\
\pard\pardeftab720\sl400
\cf34 How can u use object for abstract class?\cf35 \
\cf34 (or) What is Shared Obj?\cf35 \
\pard\pardeftab720\sl400
\cf0 We can't create object for abstract class\'a0\cf35 to call abstract class we use Shared obj.\
\
\
\pard\pardeftab720\sl400
\cf34 How many bytes we can send to apple push notification server.\cf35 \
\pard\pardeftab720\sl480
\cf34 You wish to define your custom view. Which class will be subclassed?\cf35 \
\pard\pardeftab720\sl520\sa520

\f0\fs32 \cf2 256 bytes\
}